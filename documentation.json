{
    "pipes": [
        {
            "name": "FilterLanguagesPipe",
            "id": "pipe-FilterLanguagesPipe-4c39c85add19e1536ba73f89e4f1991e",
            "file": "src/app/components/business-form/filter-languages.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "ILanguage[]"
                        },
                        {
                            "name": "totalLanguages",
                            "type": "ILanguage[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILanguage[]",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ILanguage[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalLanguages",
                            "type": "ILanguage[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterLanguages",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { ILanguage } from './../../api/metadata.d';\n\n@Pipe({\n  name: 'filterLanguages',\n})\nexport class FilterLanguagesPipe implements PipeTransform {\n\n  transform(value: ILanguage[], totalLanguages: ILanguage[]): ILanguage[] {\n    let result: ILanguage[] = value;\n    if (totalLanguages.length) {\n      result = value.filter((dfLang) => totalLanguages.every((tlng) => dfLang.code !== tlng.code));\n    }\n    return result;\n  }\n\n}\n"
        },
        {
            "name": "FilterUsedProductsPipe",
            "id": "pipe-FilterUsedProductsPipe-71acc354f4efcef2d649431bac8f6f2c",
            "file": "src/app/views/product-highlight/filter-used-products.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "IProduct[]"
                        },
                        {
                            "name": "productId",
                            "type": "string"
                        },
                        {
                            "name": "alreadyUsedProducts",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "IProduct[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "alreadyUsedProducts",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterUsedProducts",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { IProduct } from './../../api/catalog.d';\n\n@Pipe({\n  name: 'filterUsedProducts',\n})\nexport class FilterUsedProductsPipe implements PipeTransform {\n\n  transform(value: IProduct[], productId: string, alreadyUsedProducts: string[]): unknown {\n    if (!value) {\n      return [];\n    }\n    return value\n      .filter(({ id }) => id === productId || !alreadyUsedProducts.some((produId) => produId === id && produId !== productId));\n\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "IAnalyticsChartData",
            "id": "interface-IAnalyticsChartData-74fc74352c9d5f0627cbc6ddfb21797a",
            "file": "src/app/views/business-detail/business-detail.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ChartDataSets } from 'chart.js';\nimport moment from 'moment';\nimport { Label } from 'ng2-charts';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IBusiness } from 'src/app/api/business';\nimport { IAnalytics } from '../../api/analytics';\nimport { AnalyticsService } from '../../api/analytics.service';\nimport { BusinessService } from './../../api/business.service';\n\ninterface IAnalyticsChartData {\n  data: ChartDataSets[];\n  dates: Label[];\n}\n\nfunction mapAnalytics(data: IAnalytics, totalDays): IAnalyticsChartData {\n  const firstDay = moment().add(-28, 'days');\n  const allData = [...Array(totalDays).keys()]\n    .map(() => {\n      let currentValue = 0;\n      const currentDay = firstDay.add(1, 'days').format('YYYY-MM-DD');\n      const index = data.dates.findIndex((date) => moment(date).format('YYYY-MM-DD') === currentDay);\n      if (index !== -1) {\n        currentValue = data.data[index];\n      }\n\n      return [currentValue, currentDay];\n\n    });\n  return {\n    data: [{ data: allData.map((d) => d[0]), label: 'views' }],\n    dates: allData.map((d) => d[1]),\n  } as IAnalyticsChartData;\n}\n\n@Component({\n  selector: 'app-business-detail',\n  templateUrl: './business-detail.component.html',\n  styleUrls: ['./business-detail.component.css'],\n})\nexport class BusinessDetailComponent implements OnInit {\n\n  public business$: Observable<IBusiness>;\n  public firstVisit$: Observable<IAnalyticsChartData>;\n  public views$: Observable<IAnalyticsChartData>;\n  public modalsOpened$: Observable<IAnalyticsChartData>;\n  public searches$: Observable<IAnalyticsChartData>;\n  constructor(\n    private router: ActivatedRoute,\n    private businessService: BusinessService,\n    private analyticsService: AnalyticsService,\n  ) { }\n\n  public ngOnInit(): void {\n    this.business$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.businessService.getById(businessId)));\n\n    this.firstVisit$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.analyticsService.getFirstVisit(businessId)),\n        map((data) => mapAnalytics(data, 28)));\n    this.views$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.analyticsService.getViews(businessId)),\n        map((data) => mapAnalytics(data, 28)));\n    this.modalsOpened$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.analyticsService.getModalsOpened(businessId)),\n        map((data) => mapAnalytics(data, 28)));\n    this.searches$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.analyticsService.getSearches(businessId)),\n        map((data) => mapAnalytics(data, 28)));\n  }\n\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "ChartDataSets[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "dates",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IContactItems",
            "id": "interface-IContactItems-5e86f05477319d186505dd4f0f725422",
            "file": "src/app/components/business-form/business-form.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { BusinessMetaEnum, IAddress, IBusiness } from 'src/app/api/business';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { UploadFileService } from 'src/app/api/upload-file.service';\nimport { IBusinesMeta } from '../../api/business';\n\nconst fonts = [\n  {\n    group: 'Sans Serif',\n    fonts: [\n      'Arial, Helvetica, sans-serif',\n      '\"Arial Black\", Gadget, sans-serif',\n      '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      'Tahoma, Geneva, sans-serif',\n      '\"Trebuchet MS\", Helvetica, sans-serif',\n      'Verdana, Geneva, sans-serif',\n    ],\n  }, {\n    group: 'Serif',\n    fonts: [\n      '\"Times New Roman\", Times, serif',\n      'Georgia, serif',\n      '\"Palatino Linotype\", \"Book Antiqua\", Palatino, serif',\n    ],\n  }, {\n    group: 'Monospace',\n    fonts: [\n      'Courier New',\n      'Lucida Console',\n    ],\n  },\n];\nconst defaultLang = 'ca_ES';\nconst contactItems: BusinessMetaEnum[] = ['whatsapp', 'email', 'phone'];\nconst socialItems: BusinessMetaEnum[] = ['facebook', 'instagram', 'tiktok', 'web', 'youtube'];\nconst optionsItems: BusinessMetaEnum[] = ['font'];\n\ninterface IOptionsItems {\n  font: string;\n}\ninterface IContactItems {\n  whatsapp: string;\n  email: string;\n  phone: string;\n}\ninterface ISocialItems {\n  facebook: string;\n  instagram: string;\n  tiktok: string;\n  web: string;\n  youtube: string;\n}\n@Component({\n  selector: 'app-business-form',\n  templateUrl: './business-form.component.html',\n  styleUrls: ['./business-form.component.scss'],\n})\nexport class BusinessFormComponent implements OnInit, OnDestroy {\n\n  @Input() public business: IBusiness;\n  @Input() public languages: ILanguage[];\n  @Output() public submitForm = new EventEmitter<IBusiness>();\n  public busninessForm: FormGroup;\n  public languagesForm: FormArray;\n  public fonts = fonts;\n  public currentFont: IBusinesMeta;\n  public places: any;\n  public languagesSubscription: Subscription;\n  constructor(\n    private fb: FormBuilder,\n    private uploadFileService: UploadFileService) { }\n\n  public ngOnInit(): void {\n    const options = this.getMetadata<IOptionsItems>(this.business?.business_meta, optionsItems);\n    const font = options?.font || 'Arial, Helvetica, sans-serif';\n    const social = this.getMetadata<ISocialItems>(this.business?.business_meta, socialItems);\n    const contact = this.getMetadata<IContactItems>(this.business?.business_meta, contactItems);\n    const languages = this.business?.languages?.map(({ language }) => {\n      return this.languages.find((lang) => lang.code === language);\n\n    }) || [];\n    this.languagesForm = this.fb.array(languages);\n    this.languagesSubscription = this.languagesForm.valueChanges.subscribe((value: ILanguage[]) => {\n      if (value.length === 1 || !value.some(({ code }) => code === this.busninessForm.value.default_language)) {\n        this.setLanguageAsDefault(value[0].code);\n      }\n    });\n    this.busninessForm = this.fb.group({\n      id: [this.business.id],\n      name: [this.business.name, Validators.required],\n      type: [this.business.type, Validators.required],\n      logotype: this.business?.logotype || '',\n      default_lang: [this.business?.default_lang || defaultLang, Validators.required],\n      languages: [this.languagesForm, Validators.minLength(1)],\n      addLanguage: this.fb.group({ code: [null] }),\n      address: this.fb.group({\n        id: [this.business?.address.id],\n        address: [this.business?.address.address, Validators.required],\n        city: [this.business?.address.city, Validators.required],\n        country: [this.business?.address.country],\n        lat: [this.business?.address.lat],\n        lng: [this.business?.address.lng],\n        postal_code: [this.business?.address.postal_code, Validators.required],\n        state: [this.business?.address.state],\n      }),\n      social: this.fb.group({\n        facebook: social?.facebook,\n        instagram: social?.instagram,\n        tiktok: social?.tiktok,\n        web: social?.web,\n        youtube: social?.youtube,\n      }),\n      contact: this.fb.group({\n        whatsapp: contact?.whatsapp,\n        email: contact?.email,\n        phone: contact?.phone,\n      }),\n      options: this.fb.group({\n        font: [font],\n      }),\n    });\n  }\n\n  public ngOnDestroy() {\n    this.languagesSubscription.unsubscribe();\n  }\n\n  public sendForm() {\n    const socialMeta = this.setMetadata(this.busninessForm.value, socialItems, 'social');\n    const optionsMeta = this.setMetadata(this.busninessForm.value, optionsItems, 'options');\n    const contactMeta = this.setMetadata(this.busninessForm.value, contactItems, 'contact');\n    const business: IBusiness = {\n      id: this.busninessForm.value.id,\n      name: this.busninessForm.value.name,\n      type: this.busninessForm.value.type,\n      logotype: this.busninessForm.value.logotype,\n      address: this.busninessForm.value.address,\n      default_lang: this.busninessForm.value.default_lang,\n      languages: this.busninessForm.value.languages.value.map(({ code: language }) => ({ language })),\n      business_meta: [\n        ...optionsMeta,\n        ...socialMeta,\n        ...contactMeta,\n      ],\n    } as IBusiness;\n\n    this.submitForm.emit(business);\n  }\n\n  public addLanguage() {\n    const selectedLanguage = this.busninessForm.value.addLanguage.code;\n    const language = this.languages.find((lang) => lang.code === selectedLanguage);\n    this.busninessForm.get('addLanguage').patchValue({ code: null });\n    this.languagesForm.push(this.fb.group({ code: language.code, name: language.name }));\n  }\n  public removeLanguage(index: number) {\n    this.languagesForm.removeAt(index);\n  }\n  public setLanguageAsDefault(languageEnum: string) {\n    this.busninessForm.patchValue({ default_lang: languageEnum }, { emitEvent: false });\n  }\n\n  public selectFile(event: InputEvent, type: string) {\n    const file = (event.target as any).files[0];\n    this.uploadFileService.upload(type, 'business-logo', file)\n      .subscribe(\n        ({ Location }: any) => {\n          this.business.logotype = Location;\n          this.busninessForm.patchValue({ logotype: Location });\n        },\n      );\n  }\n\n  public addressChange(address: IAddress) {\n    this.busninessForm.patchValue({ address }, { emitEvent: false });\n  }\n  private getMetadata<T>(metaData: IBusinesMeta[], metadataKeys: string[]) {\n    return metadataKeys.reduce((acc, current) => {\n      const metaValue = metaData?.find((meta) => meta.name === current);\n      if (metaValue) {\n        acc[current] = metaValue.value;\n      }\n      return acc;\n    }, {} as T);\n  }\n\n  private setMetadata(business: IBusiness, items: any[], key: string): IBusinesMeta[] {\n    return items.reduce((acc, item) => {\n      if (business[key][item]) {\n        acc.push({ name: item, value: business[key][item] } as IBusinesMeta);\n      }\n      return acc;\n    }, [] as IBusinesMeta[]);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "whatsapp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IOptionsItems",
            "id": "interface-IOptionsItems-5e86f05477319d186505dd4f0f725422",
            "file": "src/app/components/business-form/business-form.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { BusinessMetaEnum, IAddress, IBusiness } from 'src/app/api/business';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { UploadFileService } from 'src/app/api/upload-file.service';\nimport { IBusinesMeta } from '../../api/business';\n\nconst fonts = [\n  {\n    group: 'Sans Serif',\n    fonts: [\n      'Arial, Helvetica, sans-serif',\n      '\"Arial Black\", Gadget, sans-serif',\n      '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      'Tahoma, Geneva, sans-serif',\n      '\"Trebuchet MS\", Helvetica, sans-serif',\n      'Verdana, Geneva, sans-serif',\n    ],\n  }, {\n    group: 'Serif',\n    fonts: [\n      '\"Times New Roman\", Times, serif',\n      'Georgia, serif',\n      '\"Palatino Linotype\", \"Book Antiqua\", Palatino, serif',\n    ],\n  }, {\n    group: 'Monospace',\n    fonts: [\n      'Courier New',\n      'Lucida Console',\n    ],\n  },\n];\nconst defaultLang = 'ca_ES';\nconst contactItems: BusinessMetaEnum[] = ['whatsapp', 'email', 'phone'];\nconst socialItems: BusinessMetaEnum[] = ['facebook', 'instagram', 'tiktok', 'web', 'youtube'];\nconst optionsItems: BusinessMetaEnum[] = ['font'];\n\ninterface IOptionsItems {\n  font: string;\n}\ninterface IContactItems {\n  whatsapp: string;\n  email: string;\n  phone: string;\n}\ninterface ISocialItems {\n  facebook: string;\n  instagram: string;\n  tiktok: string;\n  web: string;\n  youtube: string;\n}\n@Component({\n  selector: 'app-business-form',\n  templateUrl: './business-form.component.html',\n  styleUrls: ['./business-form.component.scss'],\n})\nexport class BusinessFormComponent implements OnInit, OnDestroy {\n\n  @Input() public business: IBusiness;\n  @Input() public languages: ILanguage[];\n  @Output() public submitForm = new EventEmitter<IBusiness>();\n  public busninessForm: FormGroup;\n  public languagesForm: FormArray;\n  public fonts = fonts;\n  public currentFont: IBusinesMeta;\n  public places: any;\n  public languagesSubscription: Subscription;\n  constructor(\n    private fb: FormBuilder,\n    private uploadFileService: UploadFileService) { }\n\n  public ngOnInit(): void {\n    const options = this.getMetadata<IOptionsItems>(this.business?.business_meta, optionsItems);\n    const font = options?.font || 'Arial, Helvetica, sans-serif';\n    const social = this.getMetadata<ISocialItems>(this.business?.business_meta, socialItems);\n    const contact = this.getMetadata<IContactItems>(this.business?.business_meta, contactItems);\n    const languages = this.business?.languages?.map(({ language }) => {\n      return this.languages.find((lang) => lang.code === language);\n\n    }) || [];\n    this.languagesForm = this.fb.array(languages);\n    this.languagesSubscription = this.languagesForm.valueChanges.subscribe((value: ILanguage[]) => {\n      if (value.length === 1 || !value.some(({ code }) => code === this.busninessForm.value.default_language)) {\n        this.setLanguageAsDefault(value[0].code);\n      }\n    });\n    this.busninessForm = this.fb.group({\n      id: [this.business.id],\n      name: [this.business.name, Validators.required],\n      type: [this.business.type, Validators.required],\n      logotype: this.business?.logotype || '',\n      default_lang: [this.business?.default_lang || defaultLang, Validators.required],\n      languages: [this.languagesForm, Validators.minLength(1)],\n      addLanguage: this.fb.group({ code: [null] }),\n      address: this.fb.group({\n        id: [this.business?.address.id],\n        address: [this.business?.address.address, Validators.required],\n        city: [this.business?.address.city, Validators.required],\n        country: [this.business?.address.country],\n        lat: [this.business?.address.lat],\n        lng: [this.business?.address.lng],\n        postal_code: [this.business?.address.postal_code, Validators.required],\n        state: [this.business?.address.state],\n      }),\n      social: this.fb.group({\n        facebook: social?.facebook,\n        instagram: social?.instagram,\n        tiktok: social?.tiktok,\n        web: social?.web,\n        youtube: social?.youtube,\n      }),\n      contact: this.fb.group({\n        whatsapp: contact?.whatsapp,\n        email: contact?.email,\n        phone: contact?.phone,\n      }),\n      options: this.fb.group({\n        font: [font],\n      }),\n    });\n  }\n\n  public ngOnDestroy() {\n    this.languagesSubscription.unsubscribe();\n  }\n\n  public sendForm() {\n    const socialMeta = this.setMetadata(this.busninessForm.value, socialItems, 'social');\n    const optionsMeta = this.setMetadata(this.busninessForm.value, optionsItems, 'options');\n    const contactMeta = this.setMetadata(this.busninessForm.value, contactItems, 'contact');\n    const business: IBusiness = {\n      id: this.busninessForm.value.id,\n      name: this.busninessForm.value.name,\n      type: this.busninessForm.value.type,\n      logotype: this.busninessForm.value.logotype,\n      address: this.busninessForm.value.address,\n      default_lang: this.busninessForm.value.default_lang,\n      languages: this.busninessForm.value.languages.value.map(({ code: language }) => ({ language })),\n      business_meta: [\n        ...optionsMeta,\n        ...socialMeta,\n        ...contactMeta,\n      ],\n    } as IBusiness;\n\n    this.submitForm.emit(business);\n  }\n\n  public addLanguage() {\n    const selectedLanguage = this.busninessForm.value.addLanguage.code;\n    const language = this.languages.find((lang) => lang.code === selectedLanguage);\n    this.busninessForm.get('addLanguage').patchValue({ code: null });\n    this.languagesForm.push(this.fb.group({ code: language.code, name: language.name }));\n  }\n  public removeLanguage(index: number) {\n    this.languagesForm.removeAt(index);\n  }\n  public setLanguageAsDefault(languageEnum: string) {\n    this.busninessForm.patchValue({ default_lang: languageEnum }, { emitEvent: false });\n  }\n\n  public selectFile(event: InputEvent, type: string) {\n    const file = (event.target as any).files[0];\n    this.uploadFileService.upload(type, 'business-logo', file)\n      .subscribe(\n        ({ Location }: any) => {\n          this.business.logotype = Location;\n          this.busninessForm.patchValue({ logotype: Location });\n        },\n      );\n  }\n\n  public addressChange(address: IAddress) {\n    this.busninessForm.patchValue({ address }, { emitEvent: false });\n  }\n  private getMetadata<T>(metaData: IBusinesMeta[], metadataKeys: string[]) {\n    return metadataKeys.reduce((acc, current) => {\n      const metaValue = metaData?.find((meta) => meta.name === current);\n      if (metaValue) {\n        acc[current] = metaValue.value;\n      }\n      return acc;\n    }, {} as T);\n  }\n\n  private setMetadata(business: IBusiness, items: any[], key: string): IBusinesMeta[] {\n    return items.reduce((acc, item) => {\n      if (business[key][item]) {\n        acc.push({ name: item, value: business[key][item] } as IBusinesMeta);\n      }\n      return acc;\n    }, [] as IBusinesMeta[]);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "font",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IRouteInfo",
            "id": "interface-IRouteInfo-8cf298e88bd55fd681259fbd2375c777",
            "file": "src/app/sidebar/sidebar.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/auth/auth.service';\n\nexport interface IRouteInfo {\n    path: string;\n    title: string;\n    icon: string;\n    class: string;\n    isExact: boolean;\n    needsAdmin?: boolean;\n    notLogged?: boolean;\n}\n\nexport const ROUTES: IRouteInfo[] = [\n    { path: '/', title: 'Dashboard', icon: 'nc-world-2', class: '', isExact: true },\n    { path: '/account', title: 'My Account', icon: 'nc-single-02', class: '', isExact: false },\n    { path: '/account-list', title: 'All accounts', icon: 'nc-laptop', class: '', needsAdmin: true, isExact: false },\n    { path: '/business', title: 'Business', icon: 'nc-shop', class: '', isExact: false },\n    { path: '/login', title: 'Login', icon: 'nc-single-02', class: '', isExact: true, notLogged: true },\n    { path: '/password-reset', title: 'Password reset', icon: 'nc-email-85', class: '', isExact: true, notLogged: true },\n    { path: '/signup', title: 'Signup', icon: 'nc-sun-fog-29', class: '', isExact: true, notLogged: true },\n\n];\n\n@Component({\n    moduleId: module.id,\n    selector: 'sidebar-cmp',\n    templateUrl: 'sidebar.component.html',\n})\n\nexport class SidebarComponent implements OnInit {\n    public menuItems: any[];\n\n    constructor(public authService: AuthService) { }\n\n    public get isAdmin(): boolean {\n        return this.authService.isAdmin;\n    }\n    public get isLoggedIn(): boolean {\n        return this.authService.isLoggedIn;\n    }\n    ngOnInit() {\n        this.authService.user$.subscribe(() => {\n            this.filterItems();\n        });\n\n    }\n\n    private filterItems() {\n        this.menuItems = ROUTES.filter((menuItem) => {\n            if (this.isLoggedIn && !menuItem.notLogged && !menuItem.needsAdmin) {\n                return true;\n            } else if (menuItem.notLogged && !this.isLoggedIn) {\n                return true;\n            } else if (menuItem.needsAdmin) {\n                return this.isAdmin;\n            }\n            return false;\n        });\n    }\n\n}\n",
            "properties": [
                {
                    "name": "class",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isExact",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "needsAdmin",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "notLogged",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISocialItems",
            "id": "interface-ISocialItems-5e86f05477319d186505dd4f0f725422",
            "file": "src/app/components/business-form/business-form.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { BusinessMetaEnum, IAddress, IBusiness } from 'src/app/api/business';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { UploadFileService } from 'src/app/api/upload-file.service';\nimport { IBusinesMeta } from '../../api/business';\n\nconst fonts = [\n  {\n    group: 'Sans Serif',\n    fonts: [\n      'Arial, Helvetica, sans-serif',\n      '\"Arial Black\", Gadget, sans-serif',\n      '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      'Tahoma, Geneva, sans-serif',\n      '\"Trebuchet MS\", Helvetica, sans-serif',\n      'Verdana, Geneva, sans-serif',\n    ],\n  }, {\n    group: 'Serif',\n    fonts: [\n      '\"Times New Roman\", Times, serif',\n      'Georgia, serif',\n      '\"Palatino Linotype\", \"Book Antiqua\", Palatino, serif',\n    ],\n  }, {\n    group: 'Monospace',\n    fonts: [\n      'Courier New',\n      'Lucida Console',\n    ],\n  },\n];\nconst defaultLang = 'ca_ES';\nconst contactItems: BusinessMetaEnum[] = ['whatsapp', 'email', 'phone'];\nconst socialItems: BusinessMetaEnum[] = ['facebook', 'instagram', 'tiktok', 'web', 'youtube'];\nconst optionsItems: BusinessMetaEnum[] = ['font'];\n\ninterface IOptionsItems {\n  font: string;\n}\ninterface IContactItems {\n  whatsapp: string;\n  email: string;\n  phone: string;\n}\ninterface ISocialItems {\n  facebook: string;\n  instagram: string;\n  tiktok: string;\n  web: string;\n  youtube: string;\n}\n@Component({\n  selector: 'app-business-form',\n  templateUrl: './business-form.component.html',\n  styleUrls: ['./business-form.component.scss'],\n})\nexport class BusinessFormComponent implements OnInit, OnDestroy {\n\n  @Input() public business: IBusiness;\n  @Input() public languages: ILanguage[];\n  @Output() public submitForm = new EventEmitter<IBusiness>();\n  public busninessForm: FormGroup;\n  public languagesForm: FormArray;\n  public fonts = fonts;\n  public currentFont: IBusinesMeta;\n  public places: any;\n  public languagesSubscription: Subscription;\n  constructor(\n    private fb: FormBuilder,\n    private uploadFileService: UploadFileService) { }\n\n  public ngOnInit(): void {\n    const options = this.getMetadata<IOptionsItems>(this.business?.business_meta, optionsItems);\n    const font = options?.font || 'Arial, Helvetica, sans-serif';\n    const social = this.getMetadata<ISocialItems>(this.business?.business_meta, socialItems);\n    const contact = this.getMetadata<IContactItems>(this.business?.business_meta, contactItems);\n    const languages = this.business?.languages?.map(({ language }) => {\n      return this.languages.find((lang) => lang.code === language);\n\n    }) || [];\n    this.languagesForm = this.fb.array(languages);\n    this.languagesSubscription = this.languagesForm.valueChanges.subscribe((value: ILanguage[]) => {\n      if (value.length === 1 || !value.some(({ code }) => code === this.busninessForm.value.default_language)) {\n        this.setLanguageAsDefault(value[0].code);\n      }\n    });\n    this.busninessForm = this.fb.group({\n      id: [this.business.id],\n      name: [this.business.name, Validators.required],\n      type: [this.business.type, Validators.required],\n      logotype: this.business?.logotype || '',\n      default_lang: [this.business?.default_lang || defaultLang, Validators.required],\n      languages: [this.languagesForm, Validators.minLength(1)],\n      addLanguage: this.fb.group({ code: [null] }),\n      address: this.fb.group({\n        id: [this.business?.address.id],\n        address: [this.business?.address.address, Validators.required],\n        city: [this.business?.address.city, Validators.required],\n        country: [this.business?.address.country],\n        lat: [this.business?.address.lat],\n        lng: [this.business?.address.lng],\n        postal_code: [this.business?.address.postal_code, Validators.required],\n        state: [this.business?.address.state],\n      }),\n      social: this.fb.group({\n        facebook: social?.facebook,\n        instagram: social?.instagram,\n        tiktok: social?.tiktok,\n        web: social?.web,\n        youtube: social?.youtube,\n      }),\n      contact: this.fb.group({\n        whatsapp: contact?.whatsapp,\n        email: contact?.email,\n        phone: contact?.phone,\n      }),\n      options: this.fb.group({\n        font: [font],\n      }),\n    });\n  }\n\n  public ngOnDestroy() {\n    this.languagesSubscription.unsubscribe();\n  }\n\n  public sendForm() {\n    const socialMeta = this.setMetadata(this.busninessForm.value, socialItems, 'social');\n    const optionsMeta = this.setMetadata(this.busninessForm.value, optionsItems, 'options');\n    const contactMeta = this.setMetadata(this.busninessForm.value, contactItems, 'contact');\n    const business: IBusiness = {\n      id: this.busninessForm.value.id,\n      name: this.busninessForm.value.name,\n      type: this.busninessForm.value.type,\n      logotype: this.busninessForm.value.logotype,\n      address: this.busninessForm.value.address,\n      default_lang: this.busninessForm.value.default_lang,\n      languages: this.busninessForm.value.languages.value.map(({ code: language }) => ({ language })),\n      business_meta: [\n        ...optionsMeta,\n        ...socialMeta,\n        ...contactMeta,\n      ],\n    } as IBusiness;\n\n    this.submitForm.emit(business);\n  }\n\n  public addLanguage() {\n    const selectedLanguage = this.busninessForm.value.addLanguage.code;\n    const language = this.languages.find((lang) => lang.code === selectedLanguage);\n    this.busninessForm.get('addLanguage').patchValue({ code: null });\n    this.languagesForm.push(this.fb.group({ code: language.code, name: language.name }));\n  }\n  public removeLanguage(index: number) {\n    this.languagesForm.removeAt(index);\n  }\n  public setLanguageAsDefault(languageEnum: string) {\n    this.busninessForm.patchValue({ default_lang: languageEnum }, { emitEvent: false });\n  }\n\n  public selectFile(event: InputEvent, type: string) {\n    const file = (event.target as any).files[0];\n    this.uploadFileService.upload(type, 'business-logo', file)\n      .subscribe(\n        ({ Location }: any) => {\n          this.business.logotype = Location;\n          this.busninessForm.patchValue({ logotype: Location });\n        },\n      );\n  }\n\n  public addressChange(address: IAddress) {\n    this.busninessForm.patchValue({ address }, { emitEvent: false });\n  }\n  private getMetadata<T>(metaData: IBusinesMeta[], metadataKeys: string[]) {\n    return metadataKeys.reduce((acc, current) => {\n      const metaValue = metaData?.find((meta) => meta.name === current);\n      if (metaValue) {\n        acc[current] = metaValue.value;\n      }\n      return acc;\n    }, {} as T);\n  }\n\n  private setMetadata(business: IBusiness, items: any[], key: string): IBusinesMeta[] {\n    return items.reduce((acc, item) => {\n      if (business[key][item]) {\n        acc.push({ name: item, value: business[key][item] } as IBusinesMeta);\n      }\n      return acc;\n    }, [] as IBusinesMeta[]);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "facebook",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "instagram",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "tiktok",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "web",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "youtube",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IToastOptions",
            "id": "interface-IToastOptions-86f81336d06db335d6a282b24ad038d9",
            "file": "src/app/toast.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n\nexport interface IToastOptions {\n  icon: string;\n  severity: string;\n\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastService {\n\n  constructor(private toastr: ToastrService) { }\n\n  public open(title: string, message: string, options?: IToastOptions) {\n    let icon = '';\n    let toastClass = 'alert ';\n    const body = `<span data-notify=\"message\">${message}</span>`;\n    const from = 'top';\n    const align = 'center';\n    if (options?.icon) {\n      icon = `<span data-notify=\"icon\" class=\"nc-icon ${icon}\"></span>`;\n      toastClass += 'alert-with-icon ';\n    }\n    if (options?.severity) {\n      toastClass += `alert-${options.severity} `;\n    } else {\n      toastClass += 'alert-info ';\n    }\n    this.toastr.info(\n      `${icon}${body}`,\n      title,\n      {\n        timeOut: 4000,\n        closeButton: true,\n        enableHtml: true,\n        toastClass,\n        positionClass: `toast-${from}-${align}`,\n      },\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "severity",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccountService",
            "id": "injectable-AccountService-7c25c6a95ada1f8b9a73c30ad034da9f",
            "file": "src/app/api/account.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IAccount>",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IAccount[]>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "IAccount"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "IAccount",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from './../../auth/auth.service';\nimport { IAccount } from './account';\nimport { GET_ACCOUNT_QUERY, GET_ACCOUNTS_QUERY, UPDATE_ACCOUNT } from './account.queries';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountService {\n\n  constructor(private apollo: Apollo, private auth: AuthService) { }\n\n  public get isAdmin() {\n    return this.auth.isAdmin;\n  }\n  public getAccount(): Observable<IAccount> {\n    return this.apollo.watchQuery<{ account: IAccount[] }>({\n      query: GET_ACCOUNT_QUERY,\n      variables: {\n        userId: localStorage.getItem('user_id'),\n      },\n    }).valueChanges.pipe(map((response) => response.data.account[0]));\n  }\n  public getAccounts(): Observable<IAccount[]> {\n    return this.apollo.watchQuery<{ account: IAccount[] }>({\n      query: GET_ACCOUNTS_QUERY,\n    }).valueChanges.pipe(map((response) => response.data.account));\n  }\n\n  public updateAccount(account: IAccount) {\n    return this.apollo.mutate({\n      mutation: UPDATE_ACCOUNT,\n      variables: {\n        id: account.id,\n        name: account.name,\n        lastname: account.lastname,\n      },\n      refetchQueries: [{\n        query: GET_ACCOUNT_QUERY,\n        variables: {\n          userId: localStorage.getItem('user_id'),\n        },\n      }],\n    });\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo"
                    },
                    {
                        "name": "auth",
                        "type": "AuthService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isAdmin": {
                    "name": "isAdmin",
                    "getSignature": {
                        "name": "isAdmin",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AddressService",
            "id": "injectable-AddressService-fabe6691d5bbd108244e291df2bf895b",
            "file": "src/app/api/address.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "updateAddress",
                    "args": [
                        {
                            "name": "address",
                            "type": "IAddress"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "IAddress",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { UPDATE_ADDRESS } from './address.queries';\nimport { IAddress } from './business';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressService {\n\n  constructor(private apollo: Apollo) { }\n\n  public updateAddress(address: IAddress) {\n    return this.apollo.mutate<IAddress>({\n      mutation: UPDATE_ADDRESS,\n      variables: address,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AnalyticsService",
            "id": "injectable-AnalyticsService-611f879d8f9ebb4ff061b6e95a8e0439",
            "file": "src/app/api/analytics.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getBusinessAnalytics",
                    "args": [
                        {
                            "name": "businessId",
                            "type": "string"
                        },
                        {
                            "name": "eventName",
                            "type": "AnalyticEventName"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventName",
                            "type": "AnalyticEventName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChangeLanguage",
                    "args": [
                        {
                            "name": "businessId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAnalytics>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstVisit",
                    "args": [
                        {
                            "name": "businessId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAnalytics>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModalsOpened",
                    "args": [
                        {
                            "name": "businessId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAnalytics>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSearches",
                    "args": [
                        {
                            "name": "businessId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAnalytics>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getViews",
                    "args": [
                        {
                            "name": "businessId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAnalytics>",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AnalyticEventName, IAnalytics } from './analytics';\nimport { ANALYTICS_QUERY } from './analytics.queries';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnalyticsService {\n\n  constructor(private apollo: Apollo) { }\n\n  public getFirstVisit(businessId): Observable<IAnalytics> {\n    return this.getBusinessAnalytics(businessId, 'first_visit');\n  }\n  public getViews(businessId): Observable<IAnalytics> {\n    return this.getBusinessAnalytics(businessId, 'page_view');\n  }\n  public getModalsOpened(businessId): Observable<IAnalytics> {\n    return this.getBusinessAnalytics(businessId, 'open-modal');\n  }\n  public getChangeLanguage(businessId): Observable<IAnalytics> {\n    return this.getBusinessAnalytics(businessId, 'select-language');\n  }\n  public getSearches(businessId): Observable<IAnalytics> {\n    return this.getBusinessAnalytics(businessId, 'search-item');\n  }\n\n  private getBusinessAnalytics(businessId: string, eventName: AnalyticEventName) {\n    return this.apollo.watchQuery<{ analytics: IAnalytics }>({\n      query: ANALYTICS_QUERY,\n      variables: {\n        businessId,\n        eventName,\n      },\n    }).valueChanges.pipe(map((response) => response.data.analytics));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-cf21dbffc360f967545802f85e0effd3",
            "file": "src/auth/auth.service.ts",
            "properties": [
                {
                    "name": "accessToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "auth0",
                    "type": "auth0.WebAuth",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "authenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "expiresAt",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onTokenChangeSubject",
                    "defaultValue": "new BehaviorSubject<string>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onUserLoginSubject",
                    "defaultValue": "new BehaviorSubject<AuthUser>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "userProfile",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "authorize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [
                        {
                            "name": "authResult",
                            "type": ""
                        },
                        {
                            "name": "redirect",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "authResult",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "redirect",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLoginCallback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "renewSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setSession",
                    "args": [
                        {
                            "name": "authResult",
                            "type": ""
                        },
                        {
                            "name": "profile",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "authResult",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profile",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "singup",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport * as auth0 from 'auth0-js';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { AuthUser } from './auth';\nimport { AuthConfigService } from './auth-config.service';\n\n(window as any).global = window;\nexport const EXPIRES_AT_KEY = 'expiresAt';\nexport const TOKEN_KEY = 'accessToken';\nexport const TOKEN_ID = 'token';\nexport const USER_ID = 'user_id';\n\n@Injectable()\nexport class AuthService {\n  // Create Auth0 web auth instance\n  private auth0: auth0.WebAuth;\n  public get user(): AuthUser {\n    return this.userProfile;\n  }\n  public get isAdmin(): boolean {\n    return this.userProfile &&\n      this.userProfile['https://hasura.io/jwt/claims'] &&\n      this.userProfile['https://hasura.io/jwt/claims']['x-hasura-default-role'] === 'admin' ? true : false;\n  }\n\n  public get user$(): Observable<AuthUser> {\n    return this.onUserLoginSubject.pipe(share());\n  }\n\n  public get token$(): Observable<string> {\n    return this.onTokenChangeSubject.pipe(share());\n  }\n\n  // Store authentication data\n  public accessToken: string;\n  private expiresAt: number;\n  private authenticated: boolean;\n  private userProfile: any;\n  private onUserLoginSubject = new BehaviorSubject<AuthUser>(null);\n  private onTokenChangeSubject = new BehaviorSubject<string>(null);\n\n  constructor(private router: Router, private config: AuthConfigService) {\n    this.auth0 = new auth0.WebAuth(this.config);\n\n    this.expiresAt = Number(localStorage.getItem(EXPIRES_AT_KEY));\n    this.accessToken = localStorage.getItem(TOKEN_KEY);\n    this.authenticated = this.expiresAt > 0;\n    this.renewSession();\n  }\n\n  public authorize() {\n    // Auth0 authorize request\n    this.auth0.authorize();\n  }\n\n  public login(username: string, password: string): Observable<any> {\n    return new Observable((subscriber) => {\n      const realm = 'Username-Password-Authentication';\n      this.auth0.login({ username, password, realm }, (err, ok) => {\n        if (ok !== undefined) {\n          subscriber.next(ok.Id);\n          return subscriber.complete();\n        }\n        subscriber.error(err);\n      });\n    });\n  }\n\n  public singup(email: string, password: string): Observable<any> {\n    return new Observable((subscriber) => {\n      this.auth0.signup({\n        connection: 'Username-Password-Authentication',\n        email,\n        password,\n      }, (err, ok) => {\n        if (ok !== undefined) {\n          subscriber.next(ok.Id);\n          return subscriber.complete();\n        }\n        subscriber.error(err);\n      });\n    });\n  }\n  public changePassword(email: string): Observable<any> {\n    return new Observable((subscriber) => {\n      this.auth0.changePassword({\n        connection: 'Username-Password-Authentication',\n        email,\n      }, (err, ok) => {\n        // tslint:disable-next-line:no-console\n        console.log(err, ok);\n        if (ok !== undefined) {\n          subscriber.next(ok.Id);\n          return subscriber.complete();\n        }\n        subscriber.error(err);\n      });\n    });\n  }\n\n  public handleLoginCallback() {\n    // When Auth0 hash parsed, get profile\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken) {\n        window.location.hash = '';\n        this.getUserInfo(authResult, true);\n      } else if (err) {\n        // tslint:disable-next-line:no-console\n        console.error(`Error: ${err.error}`);\n      }\n    });\n  }\n\n  private renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n      if (authResult) {\n        this.getUserInfo(authResult, false);\n      }\n    });\n  }\n\n  private getUserInfo(authResult, redirect: boolean) {\n    // Use access token to retrieve user's profile and set session\n    this.auth0.client.userInfo(authResult.accessToken, (err, profile) => {\n      if (profile) {\n        this.setSession(authResult, profile);\n        if (redirect) {\n          this.router.navigate(['/']);\n        }\n      }\n    });\n  }\n\n  private setSession(authResult, profile) {\n    // Save authentication data and update login status subject\n    this.expiresAt = authResult.expiresIn * 1000 + Date.now();\n    localStorage.setItem(EXPIRES_AT_KEY, this.expiresAt.toString());\n    localStorage.setItem(TOKEN_KEY, authResult.accessToken);\n    localStorage.setItem(TOKEN_ID, authResult.idToken);\n    localStorage.setItem(USER_ID, profile.sub);\n    this.accessToken = authResult.accessToken;\n    this.userProfile = profile;\n    this.authenticated = true;\n    this.onUserLoginSubject.next(profile);\n    this.onTokenChangeSubject.next(authResult.idToken);\n  }\n\n  public logout() {\n    localStorage.removeItem(EXPIRES_AT_KEY);\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(TOKEN_ID);\n    localStorage.removeItem(USER_ID);\n    // Log out of Auth0 session\n    // Ensure that returnTo URL is specified in Auth0\n    // Application settings for Allowed Logout URLs\n    this.auth0.logout({\n      returnTo: environment.auth.returnTo,\n      clientID: environment.auth.clientID,\n    });\n  }\n\n  public get isLoggedIn(): boolean {\n    // Check if current date is before token\n    // expiration and user is signed in locally\n    return Date.now() < this.expiresAt && this.authenticated;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "config",
                        "type": "AuthConfigService"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "AuthConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "user": {
                    "name": "user",
                    "getSignature": {
                        "name": "user",
                        "type": "",
                        "returnType": "AuthUser",
                        "line": 20
                    }
                },
                "isAdmin": {
                    "name": "isAdmin",
                    "getSignature": {
                        "name": "isAdmin",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23
                    }
                },
                "user$": {
                    "name": "user$",
                    "getSignature": {
                        "name": "user$",
                        "type": "",
                        "returnType": "Observable<AuthUser>",
                        "line": 29
                    }
                },
                "token$": {
                    "name": "token$",
                    "getSignature": {
                        "name": "token$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 33
                    }
                },
                "isLoggedIn": {
                    "name": "isLoggedIn",
                    "getSignature": {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 165
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "BusinessService",
            "id": "injectable-BusinessService-7848dc215d1f67e080ce50e030ab4dc1",
            "file": "src/app/api/business.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "business",
                            "type": "IBusiness"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "business",
                            "type": "IBusiness",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "business",
                            "type": "IBusiness"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "business",
                            "type": "IBusiness",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IBusiness[]>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBusiness>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMetadata",
                    "args": [
                        {
                            "name": "metadata",
                            "type": "IBusinesMeta[]"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "metadata",
                            "type": "IBusinesMeta[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ACCOUNT_ID_KEY } from '../constants';\nimport { IBusinesMeta, IBusiness } from './business';\nimport {\n  BUSINESS_FULL_QUERY,\n  BUSINESS_ID_QUERY,\n  DELETE_BUSINESS,\n  EDIT_BUSINESS,\n  INSERT_BUSINESS,\n  REMOVE_METADATA,\n} from './business.queries';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BusinessService {\n\n  constructor(private apollo: Apollo) { }\n\n  public getAll(): Observable<IBusiness[]> {\n    return this.apollo.watchQuery<{ business: IBusiness[] }>({\n      query: BUSINESS_FULL_QUERY,\n    }).valueChanges.pipe(map((response) => response.data.business));\n  }\n  public getById(id: string): Observable<IBusiness> {\n    return this.apollo.subscribe<{ business_by_pk: IBusiness }>({\n      query: BUSINESS_ID_QUERY,\n      variables: { id },\n    }).pipe(map((response) => response.data.business_by_pk));\n  }\n  public create(business: IBusiness): Observable<any> {\n    delete business.address.id;\n    const businnesGQL = {\n      name: business.name,\n      type: business.type,\n      logotype: business.logotype,\n      account_id: localStorage.getItem(ACCOUNT_ID_KEY),\n      business_meta: { data: business.business_meta },\n      default_lang: business.default_lang,\n      languages: {\n        data: business.languages,\n      },\n      address: {\n        data: business.address,\n      },\n    };\n    return this.apollo.mutate<any>({\n      // query: BUSINESS_FULL_QUERY\n      mutation: INSERT_BUSINESS,\n      variables: {\n        business: businnesGQL,\n      },\n      refetchQueries: [\n        { query: BUSINESS_FULL_QUERY },\n      ],\n    }).pipe(map(({ data }) => data.insert_business_one));\n  }\n\n  public edit(business: IBusiness) {\n    const languages = business.languages.map(({ language }) => ({ language, business_id: business.id }));\n    return this.apollo.mutate<IBusiness>({\n      mutation: EDIT_BUSINESS,\n      variables: {\n        id: business.id,\n        name: business.name,\n        type: business.type,\n        logotype: business.logotype,\n        default_lang: business.default_lang,\n        languages,\n      },\n      refetchQueries: [\n        { query: BUSINESS_FULL_QUERY },\n        {\n          query: BUSINESS_ID_QUERY,\n          variables: { id: business.id },\n        },\n      ],\n    });\n  }\n\n  public setMetadata(metadata: IBusinesMeta[], businessId: string) {\n\n    metadata.forEach((m) => m.business_id = businessId);\n    return this.apollo.mutate<any>({\n      mutation: REMOVE_METADATA,\n      variables: {\n        metadata,\n        businessId,\n      },\n    });\n  }\n\n  public remove(businessId: string) {\n    return this.apollo.mutate<IBusiness>({\n      mutation: DELETE_BUSINESS,\n      variables: {\n        id: businessId,\n      },\n      refetchQueries: [\n        { query: BUSINESS_FULL_QUERY },\n      ],\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CatalogService",
            "id": "injectable-CatalogService-5269d761146e46059646a19f317b0460",
            "file": "src/app/api/catalog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addHighlightProducts",
                    "args": [
                        {
                            "name": "productsIds",
                            "type": "string[]"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 295,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productsIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "IProduct"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 229,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "IProduct",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCatalog",
                    "args": [
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCategories",
                    "args": [
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCategoryById",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHightlightProducts",
                    "args": [
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 287,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 188,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertFullCatalog",
                    "args": [
                        {
                            "name": "categories",
                            "type": "InsertFullCatalog"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "categories",
                            "type": "InsertFullCatalog",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "IProduct"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 197,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "IProduct",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCategory",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "string"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 265,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortCategories",
                    "args": [
                        {
                            "name": "categories",
                            "type": "ICategory[]"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "categories",
                            "type": "ICategory[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { map, take } from 'rxjs/operators';\nimport { ICategory, IProduct, IProductHighlight } from './catalog';\nimport {\n  GET_ALL_CATEGORIES,\n  GET_ALL_PRODUCTS,\n  GET_CATEGORY,\n  GET_PRODUCT_BY_ID,\n  GET_PRODUCTS_HIGHLIGHT,\n  INSERT_CATEGORY,\n  INSERT_FULL_CATEGORY,\n  REMOVE_CATEGORY,\n  SORT_CATEGORY,\n  UPDATE_CATEGORY,\n} from './catalog.queries';\nimport { GET_CATALOG, INSERT_PRODUCT, INSERT_PRODUCTS_HIGHLIGHT, REMOVE_PRODUCT, UPDATE_PRODUCT } from './catalog.queries';\nimport { InsertFullCatalog } from './utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CatalogService {\n\n  constructor(private apollo: Apollo) { }\n\n  public getCatalog(businessId: string) {\n    return this.apollo.watchQuery<{ category: ICategory[] }>({\n      query: GET_CATALOG,\n      variables: {\n        businessId,\n      },\n    }).valueChanges.pipe(map(({ data }) => data.category));\n  }\n\n  public getCategories(businessId: string) {\n    return this.apollo.watchQuery<{ category: ICategory[] }>({\n      query: GET_ALL_CATEGORIES,\n      variables: {\n        businessId,\n      },\n    }).valueChanges.pipe(map(({ data }) => data.category));\n  }\n  public getCategoryById(categoryId: string) {\n    return this.apollo.watchQuery<{ category_by_pk: ICategory }>({\n      query: GET_CATEGORY,\n      variables: {\n        categoryId,\n      },\n    }).valueChanges.pipe(map(({ data }) => data.category_by_pk));\n  }\n\n  public insertCategory(category: ICategory) {\n    delete category.id;\n    return this.apollo.mutate<ICategory>({\n      mutation: INSERT_CATEGORY,\n      variables: {\n        category: {\n          business_id: category.business_id,\n          name: category.name,\n          name_languages: { data: category.name_languages },\n          parent_category: category.parent_category,\n        },\n      },\n      refetchQueries: [\n        {\n          query: GET_ALL_CATEGORIES,\n          variables: { businessId: category.business_id },\n        },\n        {\n          query: GET_CATALOG,\n          variables: {\n            businessId: category.business_id,\n          },\n        },\n      ],\n    });\n  }\n\n  public insertFullCatalog(categories: InsertFullCatalog) {\n    const businessId = categories[0].business_id;\n    return this.apollo.mutate<ICategory>({\n      mutation: INSERT_FULL_CATEGORY,\n      variables: {\n        categories,\n      },\n      refetchQueries: [\n        {\n          query: GET_ALL_CATEGORIES,\n          variables: {\n            businessId,\n          },\n        },\n        {\n          query: GET_CATALOG,\n          variables: {\n            businessId,\n          },\n        },\n        {\n          query: GET_ALL_PRODUCTS,\n          variables: {\n            businessId,\n          },\n        },\n      ],\n    });\n  }\n\n  public sortCategories(categories: ICategory[], businessId: string) {\n    return this.apollo.mutate({\n      mutation: SORT_CATEGORY,\n      variables: {\n        categories,\n      },\n      refetchQueries: [\n        {\n          query: GET_ALL_CATEGORIES,\n          variables: { businessId },\n        },\n        {\n          query: GET_CATALOG,\n          variables: {\n            businessId,\n          },\n        },\n      ],\n    }).pipe(take(1));\n  }\n  public editCategory(category: ICategory, businessId: string) {\n    return this.apollo.mutate({\n      mutation: UPDATE_CATEGORY,\n      variables: {\n        id: category.id,\n        name: category.name,\n        parent_category: category.parent_category,\n        languages: category.name_languages.map((lang) => ({ ...lang, category_id: category.id })),\n      },\n      refetchQueries: [\n        {\n          query: GET_CATEGORY,\n          variables: { categoryId: category.id },\n        },\n        {\n          query: GET_ALL_CATEGORIES,\n          variables: { businessId: category.business_id || businessId },\n        },\n        {\n          query: GET_CATALOG,\n          variables: {\n            businessId,\n          },\n        },\n      ],\n    }).pipe(take(1));\n  }\n\n  public removeCategory(categoryId: string, businessId: string) {\n    return this.apollo.mutate({\n      mutation: REMOVE_CATEGORY,\n      variables: {\n        id: categoryId,\n      },\n      awaitRefetchQueries: true,\n      refetchQueries: [\n        {\n          query: GET_ALL_CATEGORIES,\n          variables: { businessId },\n        },\n        {\n          query: GET_CATALOG,\n          variables: {\n            businessId,\n          },\n        },\n      ],\n    });\n  }\n\n  public getProducts(businessId: string) {\n    return this.apollo.watchQuery<{ product: IProduct[] }>({\n      query: GET_ALL_PRODUCTS,\n      variables: {\n        businessId,\n      },\n    }).valueChanges.pipe(map(({ data }) => data.product));\n  }\n  public getProductById(productId: string) {\n    return this.apollo.watchQuery<{ product_by_pk: IProduct }>({\n      query: GET_PRODUCT_BY_ID,\n      variables: {\n        id: productId,\n      },\n    }).valueChanges.pipe(map(({ data }) => data.product_by_pk));\n  }\n\n  public insertProduct(product: IProduct) {\n    delete product.id;\n    return this.apollo.mutate<IProduct>({\n      mutation: INSERT_PRODUCT,\n      variables: {\n        product: {\n          id: product.id,\n          name: product.name,\n          description: product.description,\n          category_id: product.category_id,\n          is_active: product.is_active,\n          feature_image: product.feature_image,\n          price: product.price,\n          business_id: product.business_id,\n          name_languages: { data: product.name_languages },\n          description_languages: { data: product.description_languages },\n        },\n      },\n      refetchQueries: [{\n        query: GET_ALL_PRODUCTS,\n        variables: {\n          businessId: product.business_id,\n        },\n      },\n      {\n        query: GET_CATALOG,\n        variables: {\n          businessId: product.business_id,\n        },\n      }],\n    });\n  }\n  public editProduct(product: IProduct) {\n    return this.apollo.mutate<IProduct>({\n      mutation: UPDATE_PRODUCT,\n      variables: {\n        id: product.id,\n        category_id: product.category_id,\n        description: product.description,\n        is_active: product.is_active,\n        name: product.name,\n        feature_image: product.feature_image,\n        price: product.price,\n        name_languages: product.name_languages.map((lang) => ({ ...lang, product_id: product.id })),\n        description_languages: product.description_languages.map((lang) => ({ ...lang, product_id: product.id })),\n      },\n      refetchQueries: [\n        {\n          query: GET_ALL_PRODUCTS,\n          variables: {\n            businessId: product.business_id,\n          },\n        },\n        {\n          query: GET_PRODUCT_BY_ID,\n          variables: {\n            id: product.id,\n          },\n        },\n        {\n          query: GET_CATALOG,\n          variables: {\n            businessId: product.business_id,\n          },\n        }],\n    });\n  }\n\n  public removeProduct(productId: string, businessId: string) {\n    return this.apollo.mutate<IProduct>({\n      mutation: REMOVE_PRODUCT,\n      variables: {\n        id: productId,\n      },\n      refetchQueries: [\n        {\n          query: GET_ALL_PRODUCTS,\n          variables: {\n            businessId,\n          },\n        },\n        {\n          query: GET_CATALOG,\n          variables: {\n            businessId,\n          },\n        }],\n    });\n  }\n\n  public getHightlightProducts(businessId: string) {\n    return this.apollo.watchQuery<{ product_highlight: IProductHighlight[] }>({\n      query: GET_PRODUCTS_HIGHLIGHT,\n      variables: {\n        businessId,\n      },\n    }).valueChanges.pipe(map(({ data }) => data.product_highlight));\n  }\n  public addHighlightProducts(productsIds: string[], businessId: string) {\n    return this.apollo.mutate<IProduct>({\n      mutation: INSERT_PRODUCTS_HIGHLIGHT,\n      variables: {\n        businessId,\n        productsHighlighted: productsIds.map((product_id) => ({ product_id, business_id: businessId })),\n      },\n      refetchQueries: [{\n        query: GET_PRODUCTS_HIGHLIGHT,\n        variables: {\n          businessId,\n        },\n      }],\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MetadataService",
            "id": "injectable-MetadataService-240a69052d8f50b8ac4eb9dcde78a1c8",
            "file": "src/app/api/metadata.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLanguages",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ILanguage[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GET_LANGUAGES } from './medatata.queries';\nimport { ILanguage } from './metadata.d';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetadataService {\n\n  constructor(private apollo: Apollo) { }\n\n  public getLanguages(): Observable<ILanguage[]> {\n    return this.apollo.watchQuery<{ language: ILanguage[] }>({\n      query: GET_LANGUAGES,\n    }).valueChanges.pipe(map(({ data }) => data.language));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-86f81336d06db335d6a282b24ad038d9",
            "file": "src/app/toast.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "IToastOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IToastOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n\nexport interface IToastOptions {\n  icon: string;\n  severity: string;\n\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastService {\n\n  constructor(private toastr: ToastrService) { }\n\n  public open(title: string, message: string, options?: IToastOptions) {\n    let icon = '';\n    let toastClass = 'alert ';\n    const body = `<span data-notify=\"message\">${message}</span>`;\n    const from = 'top';\n    const align = 'center';\n    if (options?.icon) {\n      icon = `<span data-notify=\"icon\" class=\"nc-icon ${icon}\"></span>`;\n      toastClass += 'alert-with-icon ';\n    }\n    if (options?.severity) {\n      toastClass += `alert-${options.severity} `;\n    } else {\n      toastClass += 'alert-info ';\n    }\n    this.toastr.info(\n      `${icon}${body}`,\n      title,\n      {\n        timeOut: 4000,\n        closeButton: true,\n        enableHtml: true,\n        toastClass,\n        positionClass: `toast-${from}-${align}`,\n      },\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "toastr",
                        "type": "ToastrService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UploadFileService",
            "id": "injectable-UploadFileService-585cba80a28bb3d512658ad3fcb0bbe4",
            "file": "src/app/api/upload-file.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        },
                        {
                            "name": "accountId",
                            "type": "string"
                        },
                        {
                            "name": "file",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "accountId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { BACKEND_URL } from '../backend-url';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UploadFileService {\n\n  constructor(@Inject(BACKEND_URL) private backendUrl: string, private http: HttpClient) { }\n\n  public upload(type: string, accountId: string, file: any) {\n    const formData = new FormData();\n    formData.append('accountId', accountId);\n    formData.append('file', file);\n    const headers = new HttpHeaders({\n      Accept: 'application/json',\n    });\n    return this.http.post(`${this.backendUrl}file/${type}`, formData, { headers });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "backendUrl",
                        "type": "string"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "backendUrl",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-d79a8427ac27bdabb84cc0e6e53e4e31",
            "file": "src/app/api/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertExcel",
                    "args": [
                        {
                            "name": "file",
                            "type": "any"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<InsertFullCatalog>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BACKEND_URL } from '../backend-url';\nimport { InsertFullCatalog } from './utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UtilsService {\n\n  constructor(@Inject(BACKEND_URL) private backendUrl: string, private http: HttpClient) {\n  }\n\n  public convertExcel(file: any, businessId: string): Observable<InsertFullCatalog> {\n    const formData = new FormData();\n    formData.append('business_id', businessId);\n    formData.append('file', file);\n    const headers = new HttpHeaders({\n      Accept: 'application/json',\n    });\n    return this.http.post<InsertFullCatalog>(`${this.backendUrl}catalog/upload`, formData, { headers });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "backendUrl",
                        "type": "string"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "backendUrl",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-e666007312551271a1e6ae42610b3bec",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get(browser.baseUrl) as Promise<any>;\n  }\n\n  getTitleText() {\n    return element(by.css('app-root h1')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthConfigService",
            "id": "class-AuthConfigService-5438b2f5061994d376df3b5b903dfcf1",
            "file": "src/auth/auth-config.service.ts",
            "type": "class",
            "sourceCode": "import { AuthConfig } from './auth';\nexport class AuthConfigService implements AuthConfig {\n  public clientID: string;\n  public domain: string;\n  public redirectUri: string;\n  public returnTo: string;\n  public scope: string;\n  public audience: string;\n  public responseType: string;\n}\n",
            "properties": [
                {
                    "name": "audience",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "clientID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "domain",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "redirectUri",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "responseType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "returnTo",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scope",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "AuthConfig"
            ]
        },
        {
            "name": "AuthMobile",
            "id": "class-AuthMobile-5ce615986722b6f985fef2614f71dbbc",
            "file": "src/auth/auth.mobile.ts",
            "type": "class",
            "sourceCode": "import { Platform } from '@angular/cdk/platform';\nimport { AuthService } from './auth.service';\n\nexport class AuthMobile {\n    constructor(platform: Platform, auth: AuthService) {\n        if (platform.ANDROID || platform.IOS) {\n            auth.authorize();\n        }\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platform",
                        "type": "Platform"
                    },
                    {
                        "name": "auth",
                        "type": "AuthService"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthServiceMock",
            "id": "class-AuthServiceMock-4a1acb9db20a8996e716ab1a6edd3165",
            "file": "src/auth/auth.service.mock.ts",
            "type": "class",
            "sourceCode": "import { Observable, Subject } from 'rxjs';\nimport { AuthUser } from './auth';\n\nconst tokenSubject = new Subject<string>();\nconst userSubject = new Subject<AuthUser>();\nconst defaultUser: AuthUser = {\n    email: 'test@tes.com',\n    email_verified: true,\n    name: 'test',\n    nickname: 'test',\n    picture: '',\n    sub: '\"auth0|122334abcdef\"',\n    updated_at: '2020-04-25T08:28:17.576Z',\n};\nexport class AuthServiceMock {\n    public get user(): AuthUser { return defaultUser; }\n    public get user$(): Observable<AuthUser> { return userSubject; }\n    public get token$(): Observable<string> { return tokenSubject; }\n    public get isLoggedIn(): boolean { return true; }\n    public accessToken: string;\n    public authorize(): void { }\n    public login(username: string, password: string): Observable<any> {\n        return new Subject<any>();\n    }\n    public singup(email: string, password: string): Observable<any> {\n        return new Subject<any>();\n    }\n    public changePassword(email: string): Observable<any> {\n        return new Subject<any>();\n    }\n    public handleLoginCallback() { }\n    public logout() { }\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "authorize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLoginCallback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "singup",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "user": {
                    "name": "user",
                    "getSignature": {
                        "name": "user",
                        "type": "",
                        "returnType": "AuthUser",
                        "line": 16
                    }
                },
                "user$": {
                    "name": "user$",
                    "getSignature": {
                        "name": "user$",
                        "type": "",
                        "returnType": "Observable<AuthUser>",
                        "line": 17
                    }
                },
                "token$": {
                    "name": "token$",
                    "getSignature": {
                        "name": "token$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 18
                    }
                },
                "isLoggedIn": {
                    "name": "isLoggedIn",
                    "getSignature": {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 19
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccountEditionComponent",
            "id": "component-AccountEditionComponent-05aa9afddd0b515cff94698f60483a4c",
            "file": "src/app/views/account-edition/account-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-edition",
            "styleUrls": [
                "./account-edition.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account$",
                    "type": "Observable<IAccount>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "saveAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "IAccount"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "IAccount",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { IAccount } from 'src/app/api/account';\nimport { AccountService } from '../../api/account.service';\n\n@Component({\n  selector: 'app-account-edition',\n  templateUrl: './account-edition.component.html',\n  styleUrls: ['./account-edition.component.css'],\n})\nexport class AccountEditionComponent implements OnInit {\n\n  public account$: Observable<IAccount>;\n  constructor(\n    private router: Router,\n    private activeRouter: ActivatedRoute,\n    private accountService: AccountService) { }\n\n  public ngOnInit(): void {\n    this.account$ = this.accountService.getAccount();\n  }\n\n  public saveAccount(account: IAccount) {\n    this.accountService.updateAccount(account)\n      .subscribe(() => this.router.navigate(['../'], { relativeTo: this.activeRouter }));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account-edition.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col-md-8\">\n    <div class=\"card\">\n        <div class=\"card-header text-primary\">\n            <h5 class=\"card-title\">Edit Profile</h5>\n        </div>\n        <div class=\"card-body\">\n            <app-account-form *ngIf=\"account$ | async as account ; else loading\"\n                              [account]=\"account\"\n                              (submitForm)=\"saveAccount($event)\"></app-account-form>\n        </div>\n    </div>\n</div>\n<ng-template #loading>\n    <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "AccountFormComponent",
            "id": "component-AccountFormComponent-2b627ead2a68140222fb326492e967a6",
            "file": "src/app/components/account-form/account-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "selector": "app-account-form",
            "styleUrls": [
                "./account-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "account",
                    "line": 14,
                    "type": "IAccount"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitForm",
                    "defaultValue": "new EventEmitter<IAccount>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accountForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IAccount } from 'src/app/api/account';\n\n@Component({\n  selector: 'app-account-form',\n  providers: [DatePipe],\n  templateUrl: './account-form.component.html',\n  styleUrls: ['./account-form.component.css'],\n})\nexport class AccountFormComponent implements OnInit {\n\n  @Input() public account: IAccount;\n  @Output() public submitForm = new EventEmitter<IAccount>();\n\n  public accountForm: FormGroup;\n  constructor(private fb: FormBuilder) { }\n\n  public ngOnInit(): void {\n    this.accountForm = this.fb.group({\n      id: [this.account?.id],\n      name: [this.account?.name, Validators.required],\n      lastname: [this.account?.lastname, Validators.required],\n    });\n  }\n\n  public sendForm() {\n    this.submitForm.emit(this.accountForm.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"accountForm\"\n      (ngSubmit)=\"sendForm()\">\n    <div class=\"row\">\n        <div class=\"col-md-7 pr-1\">\n            <div class=\"form-group\">\n                <label>Name</label>\n                <input class=\"form-control\"\n                       formControlName=\"name\" />\n            </div>\n        </div>\n        <div class=\"col-md-5 pl-1\">\n            <div class=\"form-group\">\n                <label>Last name</label>\n                <input class=\"form-control\"\n                       formControlName=\"lastname\" />\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"update ml-auto mr-auto\">\n            <button type=\"submit\"\n                    class=\"btn btn-primary btn-round\">Save</button>\n        </div>\n    </div>\n</form>"
        },
        {
            "name": "AccountIsolationComponent",
            "id": "component-AccountIsolationComponent-5a58b8bfa2d154602d1fe522db1ef497",
            "file": "src/app/views/account-isolation/account-isolation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-isolation",
            "styleUrls": [
                "./account-isolation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-isolation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-account-isolation',\n  templateUrl: './account-isolation.component.html',\n  styleUrls: ['./account-isolation.component.css'],\n})\nexport class AccountIsolationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account-isolation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "AccountListComponent",
            "id": "component-AccountListComponent-0ccb0dcc175597be1b175f5c713a6baa",
            "file": "src/app/views/account-list/account-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-list",
            "styleUrls": [
                "./account-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts$",
                    "type": "Observable<IAccount[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IAccount } from 'src/app/api/account';\nimport { AccountService } from 'src/app/api/account.service';\n@Component({\n  selector: 'app-account-list',\n  templateUrl: './account-list.component.html',\n  styleUrls: ['./account-list.component.css'],\n})\nexport class AccountListComponent implements OnInit {\n\n  public accounts$: Observable<IAccount[]>;\n\n  constructor(private accountService: AccountService) {\n  }\n\n  public ngOnInit() {\n    this.accounts$ = this.accountService.getAccounts();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".image app-brand-image {\n  width: 100%;\n}\n",
                    "styleUrl": "./account-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <ng-container *ngIf=\"accounts$ | async as accounts; else loading\">\n    <div *ngFor=\"let account of accounts\"\n         class=\"col-md-4\">\n      <div class=\"card card-user\">\n        <div class=\"image\">\n          <app-brand-image type=\"background\"></app-brand-image>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"author\">\n            <a href=\"javascript:void()\">\n              <img class=\"avatar border-gray\"\n                   [src]=\"account.thumbnail\"\n                   alt=\"...\">\n              <h5 class=\"title\">{{account.name}}</h5>\n            </a>\n            <p class=\"description\">\n              {{account.email}}\n            </p>\n          </div>\n        </div>\n        <div class=\"card-footer\">\n          <hr>\n          <div class=\"button-container\">\n            <a href=\"javascript:void()\">\n              <button class=\"btn btn-primary\">Edit</button></a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>\n<ng-template #loading>\n  <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c221eb3f2fddd106310518e991610c24",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appInfo",
                    "defaultValue": "{\n    name: environment.appName,\n    version: environment.version,\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user$",
                    "type": "Observable<IAccount>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loginHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logoutHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { AuthService } from '../auth/auth.service';\nimport { environment } from '../environments/environment';\nimport { IAccount } from './api/account.d';\nimport { AccountService } from './api/account.service';\nimport { ACCOUNT_ID_KEY } from './constants';\n@Component({\n  selector: 'app-root',\n  styleUrls: ['./app.component.scss'],\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n\n  public appInfo = {\n    name: environment.appName,\n    version: environment.version,\n  };\n  public get isUserLogged(): boolean {\n    return this.auth.isLoggedIn;\n  }\n  public user$: Observable<IAccount>;\n\n  constructor(private auth: AuthService, private accountService: AccountService) {\n    this.user$ =\n      this.auth.user$.pipe(\n        filter((user) => user !== null || Boolean(localStorage.getItem(ACCOUNT_ID_KEY))),\n        switchMap(() => this.accountService.getAccount()),\n        tap((userFromDb) => localStorage.setItem(ACCOUNT_ID_KEY, userFromDb.id)),\n      );\n  }\n\n  public logoutHandler() {\n    this.auth.logout();\n    localStorage.removeItem(ACCOUNT_ID_KEY);\n  }\n\n  public loginHandler() {\n    this.auth.authorize();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main-panel.full {\n  width: 100%;\n  transition: none !important;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isUserLogged": {
                    "name": "isUserLogged",
                    "getSignature": {
                        "name": "isUserLogged",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 20
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n    <div class=\"sidebar\"\n         data-color=\"white\"\n         data-active-color=\"danger\">\n        <sidebar-cmp></sidebar-cmp>\n    </div>\n    <div class=\"main-panel\">\n        <navbar-cmp [user]=\"user$ | async\"\n                    [isUserLogged]=\"isUserLogged\"\n                    (logoutHandler)=\"logoutHandler()\"\n                    (loginHandler)=\"loginHandler()\"></navbar-cmp>\n        <div class=\"content\">\n            <router-outlet></router-outlet>\n        </div>\n        <footer-cmp [version]=\"appInfo.version\"\n                    [name]=\"appInfo.name\"></footer-cmp>\n    </div>\n</div>"
        },
        {
            "name": "AuthPasswordResetComponent",
            "id": "component-AuthPasswordResetComponent-439c4312179801f1fd4c597d5265f1f7",
            "file": "src/auth/auth.password-reset.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signin",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth.password-reset.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pswResetForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NEVER } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthRoutes } from './auth.routes';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './auth.password-reset.component.html',\n})\nexport class AuthPasswordResetComponent implements OnInit {\n\n  public pswResetForm: FormGroup;\n  public error: string;\n\n  public get isEmailEmpty(): boolean {\n    const emailCtrl = this.pswResetForm.get('email');\n    return emailCtrl.errors !== null && emailCtrl.errors.required !== undefined && emailCtrl.dirty;\n  }\n  public get isEmailValid(): boolean {\n    const emailCtrl = this.pswResetForm.get('email');\n    return emailCtrl.errors !== null && emailCtrl.errors.email !== undefined && emailCtrl.dirty;\n  }\n\n  constructor(private fb: FormBuilder, private auth: AuthService, private route: Router) { }\n\n  public ngOnInit() {\n    this.pswResetForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n  public sendForm() {\n    this.error = undefined;\n    const { email } = this.pswResetForm.value;\n    this.pswResetForm.disable();\n    this.auth.changePassword(email)\n      .pipe(catchError((error) => {\n        this.error = error.description;\n        this.pswResetForm.enable();\n        return NEVER;\n      }))\n      .subscribe(() => this.route.navigate([AuthRoutes.SIGNIN]));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "auth",
                        "type": "AuthService"
                    },
                    {
                        "name": "route",
                        "type": "Router"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isEmailEmpty": {
                    "name": "isEmailEmpty",
                    "getSignature": {
                        "name": "isEmailEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 18
                    }
                },
                "isEmailValid": {
                    "name": "isEmailValid",
                    "getSignature": {
                        "name": "isEmailValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 22
                    }
                }
            },
            "templateData": "<form class=\"col-md-4 offset-md-4\"\n      [formGroup]=\"pswResetForm\"\n      (ngSubmit)=\"sendForm()\">\n       <app-brand-image class=\"rounded mx-auto d-block\"\n                        width=\"300px\"\n                        height=\"300px\"\n                        position=\"center\"\n                        type=\"full-color\"></app-brand-image>\n       <div class=\"form-group\">\n              <label>Email</label>\n              <input class=\"form-control\"\n                     formControlName=\"email\" />\n              <small *ngIf=\"isEmailEmpty\"\n                     class=\"text-danger\">Email cannot be empty</small>\n              <small *ngIf=\"isEmailValid\"\n                     class=\"text-danger\">Invalid email format</small>\n       </div>\n       <div class=\"form-group\">\n              <small class=\"text-danger\">{{error}}</small>\n       </div>\n       <button class=\"btn btn-primary btn-lg\"\n               [disabled]=\"pswResetForm.invalid || pswResetForm.disabled\">Reset</button>\n</form>"
        },
        {
            "name": "AuthSigninComponent",
            "id": "component-AuthSigninComponent-d85c69c9e87b0a48d193bb9c066acd00",
            "file": "src/auth/auth.signin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signin",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth.signin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "passwordResetPath",
                    "defaultValue": "'/' + AuthRoutes.PASSWORD_RESET",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "signupPath",
                    "defaultValue": "'/' + AuthRoutes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Platform } from '@angular/cdk/platform';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NEVER } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthMobile } from './auth.mobile';\nimport { AuthRoutes } from './auth.routes';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './auth.signin.component.html',\n})\nexport class AuthSigninComponent extends AuthMobile implements OnInit {\n\n  public loginForm: FormGroup;\n  public error: string;\n  public readonly passwordResetPath = '/' + AuthRoutes.PASSWORD_RESET;\n  public readonly signupPath = '/' + AuthRoutes.SIGNUP;\n  public get isEmailEmpty(): boolean {\n    const emailCtrl = this.loginForm.get('username');\n    return emailCtrl.errors !== null && emailCtrl.errors.required !== undefined && emailCtrl.dirty;\n  }\n\n  public get isPasswordEmpty(): boolean {\n    const emailCtrl = this.loginForm.get('password');\n    return emailCtrl.errors !== null && emailCtrl.errors.required !== undefined && emailCtrl.dirty;\n  }\n  constructor(private fb: FormBuilder, private auth: AuthService, platform: Platform) {\n    super(platform, auth);\n  }\n\n  public ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  public sendForm() {\n    this.error = undefined;\n    const { username, password } = this.loginForm.value;\n    this.loginForm.disable();\n    this.auth.login(username, password)\n      .pipe(catchError((error) => {\n        this.error = error.description;\n        this.loginForm.enable();\n        return NEVER;\n      }))\n      .subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "auth",
                        "type": "AuthService"
                    },
                    {
                        "name": "platform",
                        "type": "Platform"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AuthMobile",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isEmailEmpty": {
                    "name": "isEmailEmpty",
                    "getSignature": {
                        "name": "isEmailEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 20
                    }
                },
                "isPasswordEmpty": {
                    "name": "isPasswordEmpty",
                    "getSignature": {
                        "name": "isPasswordEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                }
            },
            "templateData": "<form class=\"col-md-4 offset-md-4\"\n      [formGroup]=\"loginForm\"\n      (ngSubmit)=\"sendForm()\">\n  <app-brand-image class=\"rounded mx-auto d-block\"\n                   width=\"300px\"\n                   height=\"300px\"\n                   position=\"center\"\n                   type=\"full-color\"></app-brand-image>\n  <div class=\"form-group\">\n    <label>Username/Email</label>\n    <input class=\"form-control\"\n           formControlName=\"username\" />\n    <small *ngIf=\"isEmailEmpty\"\n           class=\"text-danger\">Username/Email cannot be empty</small>\n  </div>\n  <div class=\"form-group\">\n    <label>Password</label>\n    <input class=\"form-control\"\n           type=\"password\"\n           formControlName=\"password\" />\n    <small *ngIf=\"isEmailEmpty\"\n           class=\"text-danger\">Password cannot be empty</small>\n  </div>\n  <div class=\"form-group\">\n\n    <small class=\"text-danger\">{{error}}</small>\n  </div>\n  <div class=\"form-group\">\n    <small>Forgot password <a [routerLink]=\"[passwordResetPath]\">click here</a></small>\n  </div>\n  <div class=\"form-group\">\n    <a [routerLink]=\"[signupPath]\">Signup</a>\n  </div>\n\n  <button class=\"btn btn-primary btn-lg\"\n          id=\"login-button\"\n          [disabled]=\"loginForm.invalid || loginForm.disabled\">ok</button>\n</form>"
        },
        {
            "name": "AuthSignupComponent",
            "id": "component-AuthSignupComponent-5484b8fc602e50fe7992ad7e8524cdc2",
            "file": "src/auth/auth.signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./auth.signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "signupForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NEVER } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport { samePassword } from './validators';\n\nconst pswStrength = /^(?:([A-Z])*([a-z])*(\\d)*(\\W)*){8,12}$/;\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './auth.signup.component.html',\n})\nexport class AuthSignupComponent implements OnInit {\n\n  public signupForm: FormGroup;\n  public error: string;\n  public get isSamePassword(): boolean {\n    return this.signupForm.get('passwordRepeat').errors !== null;\n  }\n  public get isEmailEmpty(): boolean {\n    const emailCtrl = this.signupForm.get('email');\n    return emailCtrl.errors !== null && emailCtrl.errors.required !== undefined && emailCtrl.dirty;\n  }\n  public get isEmailInvalid(): boolean {\n    const emailCtrl = this.signupForm.get('email');\n    return emailCtrl.errors !== null && emailCtrl.errors.email !== undefined && emailCtrl.dirty;\n  }\n  public get isPasswordValid(): boolean {\n    const emailCtrl = this.signupForm.get('password');\n    return emailCtrl.errors !== null && emailCtrl.errors.pattern !== undefined && emailCtrl.dirty;\n  }\n  constructor(private fb: FormBuilder, private auth: AuthService) { }\n\n  public ngOnInit() {\n    this.signupForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.pattern(pswStrength), samePassword('passwordRepeat')]],\n      passwordRepeat: ['', samePassword('password')],\n    });\n  }\n\n  public sendForm() {\n    this.error = '';\n    const { email, password } = this.signupForm.value;\n    this.signupForm.disable();\n    this.auth.singup(email, password)\n      .pipe(\n        map(() => this.auth.login(email, password).subscribe()),\n        catchError((error) => {\n          this.error = error.description;\n          this.signupForm.enable();\n          return NEVER;\n        }),\n      )\n      .subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "auth",
                        "type": "AuthService"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isSamePassword": {
                    "name": "isSamePassword",
                    "getSignature": {
                        "name": "isSamePassword",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 18
                    }
                },
                "isEmailEmpty": {
                    "name": "isEmailEmpty",
                    "getSignature": {
                        "name": "isEmailEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 21
                    }
                },
                "isEmailInvalid": {
                    "name": "isEmailInvalid",
                    "getSignature": {
                        "name": "isEmailInvalid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                },
                "isPasswordValid": {
                    "name": "isPasswordValid",
                    "getSignature": {
                        "name": "isPasswordValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                }
            },
            "templateData": "<form class=\"col-md-4 offset-md-4\"\n      [formGroup]=\"signupForm\"\n      (ngSubmit)=\"sendForm()\">\n       <app-brand-image class=\"rounded mx-auto d-block\"\n                        width=\"300px\"\n                        height=\"300px\"\n                        position=\"center\"\n                        type=\"full-color\"></app-brand-image>\n       <div class=\"form-group\">\n              <label>Email</label>\n              <input class=\"form-control\"\n                     type=\"email\"\n                     formControlName=\"email\" />\n              <small *ngIf=\"isEmailEmpty\"\n                     class=\"text-danger\">Email cannot be empty</small>\n              <small *ngIf=\"isEmailInvalid\"\n                     class=\"text-danger\">This field should be a valid email</small>\n       </div>\n       <div class=\"form-group\">\n              <label>Password</label>\n              <input class=\"form-control\"\n                     type=\"password\"\n                     formControlName=\"password\" />\n              <small *ngIf=\"isPasswordValid\"\n                     class=\"text-danger\">Password can contain at least 1 uppercase, 1 lowercase and 1 number</small>\n       </div>\n       <div class=\"form-group\">\n              <label>Password</label>\n              <input class=\"form-control\"\n                     type=\"password\"\n                     formControlName=\"passwordRepeat\" />\n              <small *ngIf=\"isSamePassword\"\n                     class=\"text-danger\">Password confirmation should match with password</small>\n       </div>\n       <div class=\"form-group\">\n              <small class=\"text-danger\">{{error}}</small>\n       </div>\n       <button class=\"btn btn-primary btn-lg\"\n               [disabled]=\"signupForm.invalid\">Sign up</button>\n</form>"
        },
        {
            "name": "BrandImageComponent",
            "id": "component-BrandImageComponent-d6d0529daed1826aaed50bba0e073723",
            "file": "src/app/components/brand-image/brand-image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-brand-image",
            "styleUrls": [
                "./brand-image.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./brand-image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "height",
                    "defaultValue": "'auto'",
                    "line": 22
                },
                {
                    "name": "position",
                    "defaultValue": "'left'",
                    "line": 24
                },
                {
                    "name": "type",
                    "line": 20,
                    "type": "BrandType"
                },
                {
                    "name": "width",
                    "defaultValue": "'auto'",
                    "line": 23
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseSrc",
                    "defaultValue": "'/assets/brand/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "image",
                    "type": "ElementRef<HTMLImageElement>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'image', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "src",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "style.justifyContent",
                    "line": 28
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, HostBinding, Input, OnChanges, Renderer2, SimpleChanges, ViewChild } from '@angular/core';\n\nexport type BrandType =\n  'sqare-color' |\n  'background' |\n  'full-color' |\n  'full-plain' |\n  'horizontal-color' |\n  'horizontal-negative' |\n  'imago-color' |\n  'imago-plain';\n\n@Component({\n  selector: 'app-brand-image',\n  templateUrl: './brand-image.component.html',\n  styleUrls: ['./brand-image.component.scss'],\n})\nexport class BrandImageComponent implements OnChanges {\n\n  @Input() public type: BrandType;\n\n  @Input() public height = 'auto';\n  @Input() public width = 'auto';\n  @Input() public position = 'left';\n  @ViewChild('image', { static: true }) public image: ElementRef<HTMLImageElement>;\n\n  @HostBinding('style.justifyContent')\n  public get styleInImg() {\n    switch (this.position) {\n      case 'center':\n        return this.position;\n      default:\n        return 'flex-' + this.position;\n    }\n  }\n  public src: string;\n\n  private readonly baseSrc = '/assets/brand/';\n  constructor(private render: Renderer2) {\n\n    // tslint:disable-next-line:no-console\n    if (window.location.hostname.match(/bar-code/)) {\n      this.baseSrc += 'barcode_';\n    } else {\n      this.baseSrc += 'latevacarta_';\n    }\n  }\n\n  ngOnChanges({ type, height, width }: SimpleChanges): void {\n    if (type) {\n      this.src = this.baseSrc + type.currentValue + '.svg';\n    }\n    if (height && this.height) {\n      this.render.setStyle(this.image.nativeElement, 'height', height.currentValue);\n    }\n    if (width && this.width) {\n      this.render.setStyle(this.image.nativeElement, 'width', width.currentValue);\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex !important;\n  justify-content: flex-start;\n  img {\n    max-width: 100%;\n  }\n}\n",
                    "styleUrl": "./brand-image.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "render",
                        "type": "Renderer2"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<img #image\n     [src]=\"src\" />\n"
        },
        {
            "name": "BusinessComponent",
            "id": "component-BusinessComponent-3bd4e852ae527b12f7eb8c47535ccc14",
            "file": "src/app/views/business/business.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-business",
            "styleUrls": [
                "./business.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./business.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BusinessService } from './../../api/business.service';\n\n@Component({\n  selector: 'app-business',\n  templateUrl: './business.component.html',\n  styleUrls: ['./business.component.css'],\n})\nexport class BusinessComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./business.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "BusinessCreationComponent",
            "id": "component-BusinessCreationComponent-7cf47932ee22d78e048990776c86cec4",
            "file": "src/app/views/business-creation/business-creation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-business-creation",
            "styleUrls": [
                "./business-creation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./business-creation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultBusiness",
                    "type": "IBusiness",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "languages$",
                    "type": "Observable<ILanguage[]>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [
                        {
                            "name": "business",
                            "type": "IBusiness"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "business",
                            "type": "IBusiness",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { IAddress, IBusiness } from 'src/app/api/business';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { BusinessService } from '../../api/business.service';\nimport { MetadataService } from './../../api/metadata.service';\n\n@Component({\n  selector: 'app-business-creation',\n  templateUrl: './business-creation.component.html',\n  styleUrls: ['./business-creation.component.css'],\n})\nexport class BusinessCreationComponent implements OnInit {\n\n  public languages$: Observable<ILanguage[]>;\n  public defaultBusiness: IBusiness;\n  constructor(\n    private router: Router,\n    private activeRoute: ActivatedRoute,\n    private businessService: BusinessService,\n    private metadata: MetadataService,\n  ) { }\n\n  public ngOnInit(): void {\n\n    this.languages$ = this.metadata.getLanguages();\n    this.defaultBusiness = {\n      name: '',\n      type: 'BAR',\n      address: {\n        country: 1,\n      } as IAddress,\n    } as IBusiness;\n\n  }\n\n  public sendForm(business: IBusiness) {\n    this.businessService.create(business)\n      .subscribe(({ id }) => this.router.navigate(['../', id], { relativeTo: this.activeRoute }));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./business-creation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activeRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    },
                    {
                        "name": "metadata",
                        "type": "MetadataService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metadata",
                        "type": "MetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col-md-8\">\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <h4 class=\"card-title text-primary\">Create business</h4>\n    </div>\n    <div class=\"card-body\">\n      <ng-container *ngIf=\"languages$ | async as languages; else  loading\">\n        <app-business-form [business]=\"defaultBusiness\"\n                           [languages]=\"languages\"\n                           (submitForm)=\"sendForm($event)\"></app-business-form>\n      </ng-container>\n    </div>\n  </div>\n</div>\n<ng-template #loading>\n  <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "BusinessDetailComponent",
            "id": "component-BusinessDetailComponent-74fc74352c9d5f0627cbc6ddfb21797a",
            "file": "src/app/views/business-detail/business-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-business-detail",
            "styleUrls": [
                "./business-detail.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./business-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "business$",
                    "type": "Observable<IBusiness>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firstVisit$",
                    "type": "Observable<IAnalyticsChartData>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "modalsOpened$",
                    "type": "Observable<IAnalyticsChartData>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searches$",
                    "type": "Observable<IAnalyticsChartData>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "views$",
                    "type": "Observable<IAnalyticsChartData>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ChartDataSets } from 'chart.js';\nimport moment from 'moment';\nimport { Label } from 'ng2-charts';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IBusiness } from 'src/app/api/business';\nimport { IAnalytics } from '../../api/analytics';\nimport { AnalyticsService } from '../../api/analytics.service';\nimport { BusinessService } from './../../api/business.service';\n\ninterface IAnalyticsChartData {\n  data: ChartDataSets[];\n  dates: Label[];\n}\n\nfunction mapAnalytics(data: IAnalytics, totalDays): IAnalyticsChartData {\n  const firstDay = moment().add(-28, 'days');\n  const allData = [...Array(totalDays).keys()]\n    .map(() => {\n      let currentValue = 0;\n      const currentDay = firstDay.add(1, 'days').format('YYYY-MM-DD');\n      const index = data.dates.findIndex((date) => moment(date).format('YYYY-MM-DD') === currentDay);\n      if (index !== -1) {\n        currentValue = data.data[index];\n      }\n\n      return [currentValue, currentDay];\n\n    });\n  return {\n    data: [{ data: allData.map((d) => d[0]), label: 'views' }],\n    dates: allData.map((d) => d[1]),\n  } as IAnalyticsChartData;\n}\n\n@Component({\n  selector: 'app-business-detail',\n  templateUrl: './business-detail.component.html',\n  styleUrls: ['./business-detail.component.css'],\n})\nexport class BusinessDetailComponent implements OnInit {\n\n  public business$: Observable<IBusiness>;\n  public firstVisit$: Observable<IAnalyticsChartData>;\n  public views$: Observable<IAnalyticsChartData>;\n  public modalsOpened$: Observable<IAnalyticsChartData>;\n  public searches$: Observable<IAnalyticsChartData>;\n  constructor(\n    private router: ActivatedRoute,\n    private businessService: BusinessService,\n    private analyticsService: AnalyticsService,\n  ) { }\n\n  public ngOnInit(): void {\n    this.business$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.businessService.getById(businessId)));\n\n    this.firstVisit$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.analyticsService.getFirstVisit(businessId)),\n        map((data) => mapAnalytics(data, 28)));\n    this.views$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.analyticsService.getViews(businessId)),\n        map((data) => mapAnalytics(data, 28)));\n    this.modalsOpened$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.analyticsService.getModalsOpened(businessId)),\n        map((data) => mapAnalytics(data, 28)));\n    this.searches$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.analyticsService.getSearches(businessId)),\n        map((data) => mapAnalytics(data, 28)));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".image img {\n  width: 100%;\n}\n.button-container a {\n  margin: 0 5px;\n}\n",
                    "styleUrl": "./business-detail.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    },
                    {
                        "name": "analyticsService",
                        "type": "AnalyticsService"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "analyticsService",
                        "type": "AnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <div class=\"col-md-12\"\n       *ngIf=\"business$ | async as business; else loading\">\n    <div class=\"card card-user\">\n      <div class=\"image\">\n        <app-brand-image width=\"100%\"\n                         type=\"background\"></app-brand-image>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"author\">\n          <a [routerLink]=\"['..']\">\n            <img class=\"avatar border-gray\"\n                 [src]=\"business.logotype\"\n                 alt=\"...\">\n            <h5 class=\"title\">{{business.name}}</h5>\n          </a>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <hr>\n        <div class=\"button-container\">\n          <a [routerLink]=\"['edit']\"><button class=\"btn btn-primary\">Edit</button></a>\n          <a [routerLink]=\"['qr']\"><button class=\"btn btn-secondary\">See QR</button></a>\n          <a [routerLink]=\"['catalog']\"><button class=\"btn btn-info\">Catalog</button></a>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-6\">\n    <div class=\"card card-user\">\n      <div class=\"card-header\">\n        <div class=\"card-title text-primary\">Total views</div>\n      </div>\n      <div class=\"card-body\"\n           *ngIf=\"views$ | async as views; else loading\">\n        <canvas baseChart\n                [datasets]=\"views.data\"\n                [labels]=\"views.dates\"\n                [legend]=\"false\"\n                chartType=\"line\"></canvas>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-6\">\n\n    <div class=\"card card-user\">\n      <div class=\"card-header\">\n        <div class=\"card-title text-primary\">First visit</div>\n      </div>\n      <div class=\"card-body\"\n           *ngIf=\"firstVisit$ | async as firstVisit ; else loading\">\n        <canvas baseChart\n                [datasets]=\"firstVisit.data\"\n                [labels]=\"firstVisit.dates\"\n                [legend]=\"false\"\n                chartType=\"line\"></canvas>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-6\">\n\n    <div class=\"card card-user\">\n      <div class=\"card-header\">\n        <div class=\"card-title text-primary\">Searches</div>\n      </div>\n      <div class=\"card-body\"\n           *ngIf=\"searches$ | async as searches ; else loading\">\n        <canvas baseChart\n                [datasets]=\"searches.data\"\n                [labels]=\"searches.dates\"\n                [legend]=\"false\"\n                chartType=\"line\"></canvas>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-6\">\n\n    <div class=\"card card-user\">\n      <div class=\"card-header\">\n        <div class=\"card-title text-primary\">Modals opened</div>\n      </div>\n      <div class=\"card-body\"\n           *ngIf=\"modalsOpened$ | async as modalsOpened ; else loading\">\n        <canvas baseChart\n                [datasets]=\"modalsOpened.data\"\n                [labels]=\"modalsOpened.dates\"\n                [legend]=\"false\"\n                chartType=\"line\"></canvas>\n      </div>\n    </div>\n  </div>\n</div>\n<ng-template #loading>\n  <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "BusinessEditionComponent",
            "id": "component-BusinessEditionComponent-af03d194134daa5fbd4da7034f7ca2eb",
            "file": "src/app/views/business-edition/business-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-business-edition",
            "styleUrls": [
                "./business-edition.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./business-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data$",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "languages$",
                    "type": "Observable<ILanguage[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "editBusiness",
                    "args": [
                        {
                            "name": "business",
                            "type": "IBusiness"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "business",
                            "type": "IBusiness",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { combineLatest, forkJoin, Observable } from 'rxjs';\nimport { mergeMap, tap } from 'rxjs/operators';\nimport { IBusiness } from 'src/app/api/business';\nimport { BusinessService } from 'src/app/api/business.service';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { MetadataService } from 'src/app/api/metadata.service';\nimport { AddressService } from './../../api/address.service';\nimport { ToastService } from './../../toast.service';\n\n@Component({\n  selector: 'app-business-edition',\n  templateUrl: './business-edition.component.html',\n  styleUrls: ['./business-edition.component.css'],\n})\nexport class BusinessEditionComponent implements OnInit {\n\n  public data$: Observable<[IBusiness, ILanguage[]]>;\n  public languages$: Observable<ILanguage[]>;\n  constructor(\n    private activeRouter: ActivatedRoute,\n    private router: Router,\n    private businessService: BusinessService,\n    private addressService: AddressService,\n    private metadata: MetadataService,\n    private toast: ToastService,\n  ) { }\n\n  public ngOnInit(): void {\n    this.data$ = this.activeRouter.params\n      .pipe(mergeMap(({ businessId }) => {\n        return combineLatest([\n          this.businessService.getById(businessId),\n          this.metadata.getLanguages(),\n        ]);\n      },\n      ));\n  }\n\n  public editBusiness(business: IBusiness) {\n    forkJoin([\n      this.businessService.edit(business),\n      this.businessService.setMetadata(business.business_meta, business.id),\n      this.addressService.updateAddress(business.address),\n    ],\n    ).pipe(tap((d) => {\n      this.toast.open('Info', 'Business saved successfully');\n    })).subscribe(() => this.router.navigate(['/business']));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./business-edition.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService"
                    },
                    {
                        "name": "metadata",
                        "type": "MetadataService"
                    },
                    {
                        "name": "toast",
                        "type": "ToastService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metadata",
                        "type": "MetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toast",
                        "type": "ToastService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col-md-8\">\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <h4 class=\"card-title text-primary\">Edit business</h4>\n    </div>\n    <div class=\"card-body\">\n      <ng-container *ngIf=\"data$ | async as data ;else loading\">\n\n        <app-business-form [languages]=\"data[1]\"\n                           (submitForm)=\"editBusiness($event)\"\n                           [business]=\"data[0]\"></app-business-form>\n      </ng-container>\n    </div>\n  </div>\n</div>\n<ng-template #loading>\n  <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "BusinessFormComponent",
            "id": "component-BusinessFormComponent-5e86f05477319d186505dd4f0f725422",
            "file": "src/app/components/business-form/business-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-business-form",
            "styleUrls": [
                "./business-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./business-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "business",
                    "line": 62,
                    "type": "IBusiness"
                },
                {
                    "name": "languages",
                    "line": 63,
                    "type": "ILanguage[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitForm",
                    "defaultValue": "new EventEmitter<IBusiness>()",
                    "line": 64,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "busninessForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "currentFont",
                    "type": "IBusinesMeta",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fonts",
                    "defaultValue": "fonts",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "languagesForm",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "languagesSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "places",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "addressChange",
                    "args": [
                        {
                            "name": "address",
                            "type": "IAddress"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "IAddress",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetadata",
                    "args": [
                        {
                            "name": "metaData",
                            "type": "IBusinesMeta[]"
                        },
                        {
                            "name": "metadataKeys",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 179,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "metaData",
                            "type": "IBusinesMeta[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metadataKeys",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "removeLanguage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "InputEvent"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "InputEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setLanguageAsDefault",
                    "args": [
                        {
                            "name": "languageEnum",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "languageEnum",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMetadata",
                    "args": [
                        {
                            "name": "business",
                            "type": "IBusiness"
                        },
                        {
                            "name": "items",
                            "type": "any[]"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "IBusinesMeta[]",
                    "typeParameters": [],
                    "line": 189,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "business",
                            "type": "IBusiness",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { BusinessMetaEnum, IAddress, IBusiness } from 'src/app/api/business';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { UploadFileService } from 'src/app/api/upload-file.service';\nimport { IBusinesMeta } from '../../api/business';\n\nconst fonts = [\n  {\n    group: 'Sans Serif',\n    fonts: [\n      'Arial, Helvetica, sans-serif',\n      '\"Arial Black\", Gadget, sans-serif',\n      '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      'Tahoma, Geneva, sans-serif',\n      '\"Trebuchet MS\", Helvetica, sans-serif',\n      'Verdana, Geneva, sans-serif',\n    ],\n  }, {\n    group: 'Serif',\n    fonts: [\n      '\"Times New Roman\", Times, serif',\n      'Georgia, serif',\n      '\"Palatino Linotype\", \"Book Antiqua\", Palatino, serif',\n    ],\n  }, {\n    group: 'Monospace',\n    fonts: [\n      'Courier New',\n      'Lucida Console',\n    ],\n  },\n];\nconst defaultLang = 'ca_ES';\nconst contactItems: BusinessMetaEnum[] = ['whatsapp', 'email', 'phone'];\nconst socialItems: BusinessMetaEnum[] = ['facebook', 'instagram', 'tiktok', 'web', 'youtube'];\nconst optionsItems: BusinessMetaEnum[] = ['font'];\n\ninterface IOptionsItems {\n  font: string;\n}\ninterface IContactItems {\n  whatsapp: string;\n  email: string;\n  phone: string;\n}\ninterface ISocialItems {\n  facebook: string;\n  instagram: string;\n  tiktok: string;\n  web: string;\n  youtube: string;\n}\n@Component({\n  selector: 'app-business-form',\n  templateUrl: './business-form.component.html',\n  styleUrls: ['./business-form.component.scss'],\n})\nexport class BusinessFormComponent implements OnInit, OnDestroy {\n\n  @Input() public business: IBusiness;\n  @Input() public languages: ILanguage[];\n  @Output() public submitForm = new EventEmitter<IBusiness>();\n  public busninessForm: FormGroup;\n  public languagesForm: FormArray;\n  public fonts = fonts;\n  public currentFont: IBusinesMeta;\n  public places: any;\n  public languagesSubscription: Subscription;\n  constructor(\n    private fb: FormBuilder,\n    private uploadFileService: UploadFileService) { }\n\n  public ngOnInit(): void {\n    const options = this.getMetadata<IOptionsItems>(this.business?.business_meta, optionsItems);\n    const font = options?.font || 'Arial, Helvetica, sans-serif';\n    const social = this.getMetadata<ISocialItems>(this.business?.business_meta, socialItems);\n    const contact = this.getMetadata<IContactItems>(this.business?.business_meta, contactItems);\n    const languages = this.business?.languages?.map(({ language }) => {\n      return this.languages.find((lang) => lang.code === language);\n\n    }) || [];\n    this.languagesForm = this.fb.array(languages);\n    this.languagesSubscription = this.languagesForm.valueChanges.subscribe((value: ILanguage[]) => {\n      if (value.length === 1 || !value.some(({ code }) => code === this.busninessForm.value.default_language)) {\n        this.setLanguageAsDefault(value[0].code);\n      }\n    });\n    this.busninessForm = this.fb.group({\n      id: [this.business.id],\n      name: [this.business.name, Validators.required],\n      type: [this.business.type, Validators.required],\n      logotype: this.business?.logotype || '',\n      default_lang: [this.business?.default_lang || defaultLang, Validators.required],\n      languages: [this.languagesForm, Validators.minLength(1)],\n      addLanguage: this.fb.group({ code: [null] }),\n      address: this.fb.group({\n        id: [this.business?.address.id],\n        address: [this.business?.address.address, Validators.required],\n        city: [this.business?.address.city, Validators.required],\n        country: [this.business?.address.country],\n        lat: [this.business?.address.lat],\n        lng: [this.business?.address.lng],\n        postal_code: [this.business?.address.postal_code, Validators.required],\n        state: [this.business?.address.state],\n      }),\n      social: this.fb.group({\n        facebook: social?.facebook,\n        instagram: social?.instagram,\n        tiktok: social?.tiktok,\n        web: social?.web,\n        youtube: social?.youtube,\n      }),\n      contact: this.fb.group({\n        whatsapp: contact?.whatsapp,\n        email: contact?.email,\n        phone: contact?.phone,\n      }),\n      options: this.fb.group({\n        font: [font],\n      }),\n    });\n  }\n\n  public ngOnDestroy() {\n    this.languagesSubscription.unsubscribe();\n  }\n\n  public sendForm() {\n    const socialMeta = this.setMetadata(this.busninessForm.value, socialItems, 'social');\n    const optionsMeta = this.setMetadata(this.busninessForm.value, optionsItems, 'options');\n    const contactMeta = this.setMetadata(this.busninessForm.value, contactItems, 'contact');\n    const business: IBusiness = {\n      id: this.busninessForm.value.id,\n      name: this.busninessForm.value.name,\n      type: this.busninessForm.value.type,\n      logotype: this.busninessForm.value.logotype,\n      address: this.busninessForm.value.address,\n      default_lang: this.busninessForm.value.default_lang,\n      languages: this.busninessForm.value.languages.value.map(({ code: language }) => ({ language })),\n      business_meta: [\n        ...optionsMeta,\n        ...socialMeta,\n        ...contactMeta,\n      ],\n    } as IBusiness;\n\n    this.submitForm.emit(business);\n  }\n\n  public addLanguage() {\n    const selectedLanguage = this.busninessForm.value.addLanguage.code;\n    const language = this.languages.find((lang) => lang.code === selectedLanguage);\n    this.busninessForm.get('addLanguage').patchValue({ code: null });\n    this.languagesForm.push(this.fb.group({ code: language.code, name: language.name }));\n  }\n  public removeLanguage(index: number) {\n    this.languagesForm.removeAt(index);\n  }\n  public setLanguageAsDefault(languageEnum: string) {\n    this.busninessForm.patchValue({ default_lang: languageEnum }, { emitEvent: false });\n  }\n\n  public selectFile(event: InputEvent, type: string) {\n    const file = (event.target as any).files[0];\n    this.uploadFileService.upload(type, 'business-logo', file)\n      .subscribe(\n        ({ Location }: any) => {\n          this.business.logotype = Location;\n          this.busninessForm.patchValue({ logotype: Location });\n        },\n      );\n  }\n\n  public addressChange(address: IAddress) {\n    this.busninessForm.patchValue({ address }, { emitEvent: false });\n  }\n  private getMetadata<T>(metaData: IBusinesMeta[], metadataKeys: string[]) {\n    return metadataKeys.reduce((acc, current) => {\n      const metaValue = metaData?.find((meta) => meta.name === current);\n      if (metaValue) {\n        acc[current] = metaValue.value;\n      }\n      return acc;\n    }, {} as T);\n  }\n\n  private setMetadata(business: IBusiness, items: any[], key: string): IBusinesMeta[] {\n    return items.reduce((acc, item) => {\n      if (business[key][item]) {\n        acc.push({ name: item, value: business[key][item] } as IBusinesMeta);\n      }\n      return acc;\n    }, [] as IBusinesMeta[]);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "select {\n  height: 39px;\n  align-self: center;\n}\n\n.logo-wrap {\n  display: flex;\n  .logo-image {\n    flex: 0 0 160px;\n  }\n  input {\n    flex: 1;\n  }\n}\n",
                    "styleUrl": "./business-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "uploadFileService",
                        "type": "UploadFileService"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uploadFileService",
                        "type": "UploadFileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"busninessForm\"\n      (ngSubmit)=\"sendForm()\">\n  <div class=\"row\">\n    <div class=\"col-md-5 pr-1\">\n      <div class=\"form-group\">\n        <label>Name</label>\n        <input class=\"form-control\"\n               formControlName=\"name\" />\n      </div>\n    </div>\n    <div class=\"col-md5 pl-1\">\n      <div class=\"form-group\">\n        <label>Logo</label>\n        <div class=\"logo-wrap\">\n          <div *ngIf=\"business.logotype\"\n               class=\"logo-image\">\n            <img [src]=\"business.logotype\"\n                 width=\"150\">\n          </div>\n          <input class=\"form-control\"\n                 type=\"file\"\n                 (change)=\"selectFile($event, 'logotype')\" />\n        </div>\n      </div>\n    </div>\n\n  </div>\n  <div class=\"form-group\">\n    <label>Type</label>\n    <select class=\"form-control\"\n            formControlName=\"type\">\n      <option value=\"BAR\">Bar</option>\n      <option value=\"RES\">Restaurant</option>\n      <option value=\"PUB\">Pub</option>\n    </select>\n  </div>\n  <div>\n    <h5 class=\"text-primary\">Languages</h5>\n    <table class=\"table\">\n      <tr>\n        <th>Name</th>\n        <th>Delete</th>\n        <th>Default</th>\n      </tr>\n      <tr *ngFor=\"let lang of languagesForm.controls; index as i\">\n        <td> {{lang.value.name}} </td>\n        <td><button type=\"button\"\n                  [disabled]=\"languagesForm.controls.length === 1\"\n                  class=\"btn btn-secondary\"\n                  (click)=\"removeLanguage(i)\">Remove</button></td>\n        <td><button type=\"button\"\n                  *ngIf=\"busninessForm.value.default_lang !== lang.value.code; else defaultLang\"\n                  class=\"btn btn-info\"\n                  (click)=\"setLanguageAsDefault(lang.value.code)\">SetAsDefault</button>\n          <ng-template #defaultLang>\n            Is default\n          </ng-template>\n        </td>\n      </tr>\n    </table>\n    <div class=\"form-group-inline\"\n         formGroupName=\"addLanguage\"\n         *ngIf=\"languages.length !== languagesForm.controls.length \">\n      <div class=\"input-group mb-3\">\n        <div class=\"input-group-prepend\">\n          <button class=\"btn btn-secondary\"\n                  type=\"button\"\n                  [disabled]=\"busninessForm.get('addLanguage').invalid\"\n                  (click)=\"addLanguage()\">Add</button>\n        </div>\n        <select class=\"form-control\"\n                formControlName=\"code\">\n          <option [ngValue]=\"null\">Select one language…</option>\n          <option *ngFor=\"let lang of languages | filterLanguages : languagesForm.value\"\n                  [value]=\"lang.code\">{{lang.name}}</option>\n        </select>\n      </div>\n\n    </div>\n  </div>\n\n  <div formGroupName=\"address\">\n    <h5 class=\"text-primary\">Address</h5>\n\n    <div class=\"form-group\">\n      <app-set-address (addressChange)=\"addressChange($event)\"></app-set-address>\n    </div>\n    <div class=\"form-group\">\n      <label>Address</label>\n      <input class=\"form-control\"\n             formControlName=\"address\" />\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-4 pr-1\">\n        <div class=\"form-group\">\n          <label>City</label>\n          <input class=\"form-control\"\n                 formControlName=\"city\" />\n        </div>\n      </div>\n      <div class=\"col-md-4 px-1\">\n        <div class=\"form-group\">\n          <label>Postal code</label>\n          <input class=\"form-control\"\n                 type=\"number\"\n                 formControlName=\"postal_code\" />\n        </div>\n      </div>\n      <div class=\"col-md-4 pl-1\">\n        <div class=\"form-group\">\n          <label>State/Province</label>\n          <input class=\"form-control\"\n                 formControlName=\"state\" />\n        </div>\n      </div>\n    </div>\n  </div>\n  <div formGroupName=\"options\">\n    <h5 class=\"text-primary\">Options</h5>\n    <div class=\"form-group\">\n      <label>Font</label>\n      <select class=\"form-control\"\n              formControlName=\"font\">\n        <optgroup *ngFor=\"let group of fonts\"\n                  [label]=\"group.group\">\n          <option *ngFor=\"let font of group.fonts\"\n                  [value]=\"font\">{{font}}</option>\n        </optgroup>\n      </select>\n    </div>\n  </div>\n  <div formGroupName=\"contact\">\n    <h5 class=\"text-primary\">Contact</h5>\n    <div class=\"form-group\">\n      <label>Phone</label>\n      <input class=\"form-control\"\n             formControlName=\"phone\" />\n    </div>\n    <div class=\"form-group\">\n      <label>Whatsapp</label>\n      <input class=\"form-control\"\n             formControlName=\"whatsapp\" />\n    </div>\n    <div class=\"form-group\">\n      <label>Email</label>\n      <input class=\"form-control\"\n             formControlName=\"email\" />\n    </div>\n  </div>\n  <div formGroupName=\"social\">\n    <h5 class=\"text-primary\">Social</h5>\n    <div class=\"form-group\">\n      <label>Facebook</label>\n      <input class=\"form-control\"\n             formControlName=\"facebook\" />\n    </div>\n    <div class=\"form-group\">\n      <label>Instagram</label>\n      <input class=\"form-control\"\n             formControlName=\"instagram\" />\n    </div>\n    <div class=\"form-group\">\n      <label>Tiktok</label>\n      <input class=\"form-control\"\n             formControlName=\"tiktok\" />\n    </div>\n    <div class=\"form-group\">\n      <label>Youtube</label>\n      <input class=\"form-control\"\n             formControlName=\"youtube\" />\n    </div>\n    <div class=\"form-group\">\n      <label>Website</label>\n      <input class=\"form-control\"\n             formControlName=\"web\" />\n    </div>\n  </div>\n\n\n  <div class=\"row\">\n    <div class=\"update ml-auto mr-auto\">\n      <button type=\"submit\"\n              [disabled]=\"busninessForm.invalid\"\n              class=\"btn btn-primary btn-round\">Save</button>\n    </div>\n  </div>\n</form>"
        },
        {
            "name": "BusinessIsolationComponent",
            "id": "component-BusinessIsolationComponent-bd49bda0d1f28ea130a00c17c873689d",
            "file": "src/app/views/business-isolation/business-isolation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-business-isolation",
            "styleUrls": [
                "./business-isolation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./business-isolation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-business-isolation',\n  templateUrl: './business-isolation.component.html',\n  styleUrls: ['./business-isolation.component.css'],\n})\nexport class BusinessIsolationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./business-isolation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "BusinessListComponent",
            "id": "component-BusinessListComponent-336cdecc5c99024a7e4a29c8664975c6",
            "file": "src/app/views/business-list/business-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-business-list",
            "styleUrls": [
                "./business-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./business-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "business$",
                    "type": "Observable<IBusiness[]>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "removeBusiness",
                    "args": [
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IBusiness } from 'src/app/api/business';\nimport { BusinessService } from '../../api/business.service';\n\n@Component({\n  selector: 'app-business-list',\n  templateUrl: './business-list.component.html',\n  styleUrls: ['./business-list.component.css'],\n})\nexport class BusinessListComponent implements OnInit {\n\n  public business$: Observable<IBusiness[]>;\n  constructor(private businessService: BusinessService) {\n  }\n\n  public ngOnInit() {\n    this.business$ = this.businessService.getAll();\n  }\n\n  public removeBusiness(businessId: string) {\n    const userWantsToDelete = confirm('Are you sure...');\n    if (userWantsToDelete) {\n      this.businessService.remove(businessId).subscribe();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./business-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n    <div class=\"card-header\">\n        <h4 class=\"card-title\">Business</h4>\n    </div>\n    <div class=\"card-body\">\n        <div class=\"table-responsive\">\n            <table class=\"table\"\n                   *ngIf=\"business$ | async as businesses; else loading\">\n                <tr *ngIf=\"businesses.length\">\n                    <th><a [routerLink]=\"['create']\">+</a></th>\n                    <th>Name</th>\n                    <th>QR</th>\n                    <th>Catalog</th>\n                    <th>Edit</th>\n                    <th>Delete</th>\n                </tr>\n                <tr *ngFor=\"let business of businesses\">\n                    <td colspan=\"2\"><a [routerLink]=\"[business.id]\">{{business.name}}</a></td>\n                    <td><a [routerLink]=\"[business.id, 'qr']\">QR</a></td>\n                    <td><a [routerLink]=\"[business.id,'catalog']\">See</a></td>\n                    <td><a [routerLink]=\"[business.id, 'edit']\">Edit</a></td>\n                    <td><a (click)=\"removeBusiness(business.id)\"\n                           routerLink=\".\">Delete</a></td>\n                </tr>\n                <tr *ngIf=\"!businesses.length\">\n                    <td>There are any business <a [routerLink]=\"['create']\">create your first one</a></td>\n                </tr>\n            </table>\n        </div>\n        <ng-template #loading>\n            <app-loader></app-loader>\n        </ng-template>\n    </div>\n</div>"
        },
        {
            "name": "BusinessQrComponent",
            "id": "component-BusinessQrComponent-de996b16bc9572db10e36fcea81e147a",
            "file": "src/app/views/business-qr/business-qr.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-business-qr",
            "styleUrls": [
                "./business-qr.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./business-qr.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contents",
                    "type": "QueryList<ElementRef<HTMLDivElement>>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'content'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "correctionLevel",
                    "defaultValue": "NgxQrcodeErrorCorrectionLevels.HIGH",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data$",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "elementType",
                    "defaultValue": "NgxQrcodeElementTypes.URL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hostname",
                    "defaultValue": "window.location.hostname.replace('admin.', '')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sizes",
                    "defaultValue": "[{\n    name: 'small',\n    size: 250,\n  },\n  {\n    name: 'medium',\n    size: 500,\n  },\n  {\n\n    name: 'large',\n    size: 1000,\n  }]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "print",
                    "args": [
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pxToCm",
                    "args": [
                        {
                            "name": "pixel",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "pixel",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgxQrcodeElementTypes, NgxQrcodeErrorCorrectionLevels } from '@techiediaries/ngx-qrcode';\nimport html2canvas from 'html2canvas';\nimport jspdf from 'jspdf';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IBusiness } from 'src/app/api/business';\nimport { BusinessService } from '../../api/business.service';\n\n@Component({\n  selector: 'app-business-qr',\n  templateUrl: './business-qr.component.html',\n  styleUrls: ['./business-qr.component.scss'],\n})\nexport class BusinessQrComponent implements OnInit {\n\n  public elementType = NgxQrcodeElementTypes.URL;\n  public correctionLevel = NgxQrcodeErrorCorrectionLevels.HIGH;\n\n  @ViewChildren('content') public contents: QueryList<ElementRef<HTMLDivElement>>;\n  public data$: Observable<{ business: IBusiness, url: string }>;\n\n  public hostname = window.location.hostname.replace('admin.', '');\n  public form: FormGroup;\n  public sizes = [{\n    name: 'small',\n    size: 250,\n  },\n  {\n    name: 'medium',\n    size: 500,\n  },\n  {\n\n    name: 'large',\n    size: 1000,\n  }];\n\n  constructor(private business: BusinessService, private activatedRouter: ActivatedRoute, private fb: FormBuilder) { }\n\n  public ngOnInit(): void {\n\n    this.form = this.fb.group({\n      size: this.sizes[0].size,\n      copies: 1,\n    });\n\n    // TODO fins the way to extract params from parent\n    const url$ = this.activatedRouter.params.pipe(map(({ businessId }) => {\n      const url = `${window.location.protocol}//qr.${this.hostname}/${businessId}`;\n      return url;\n    }));\n    const business$ = this.activatedRouter.params.pipe(switchMap(({ businessId }) => {\n      return this.business.getById(businessId);\n    }));\n    this.data$ = combineLatest([business$, url$]).pipe(map((data) => ({ business: data[0], url: data[1] })));\n  }\n\n  public print(businessId: string) {\n\n    const element = this.contents.find(({ nativeElement }) => nativeElement.id === 'print');\n    html2canvas(element.nativeElement, {\n      scrollX: 0,\n      scrollY: 0,\n      scale: 1,\n    }).then((canvas) => {\n      const contentDataURL = canvas.toDataURL('image/png');\n      const width = this.pxToCm(canvas.width);\n      const height = this.pxToCm(canvas.height);\n      const pdf = new jspdf('p', 'cm', [width, height]);\n      pdf.addImage(contentDataURL, 'WEBP', 0, 0, width, height, 'none');\n      [...Array(this.form.value.copies - 1).keys()].forEach(() => {\n        pdf.addPage([width, height], 'p').addImage(contentDataURL, 'WEBP', 0, 0, width, height, 'none');\n      });\n      pdf.save(`qr-code__${businessId}.pdf`);\n    });\n  }\n  private pxToCm(pixel: number): number {\n    return pixel / 96 * 2.54;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  .qr-print-wrapper {\n    text-align: center;\n    &.hide {\n      position: fixed;\n      top: -1999999px;\n    }\n    .business-name {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n  }\n  .card-body {\n    display: flex;\n    flex-direction: column;\n  }\n  .qr-preview {\n    border: 1px solid #a0a0a0;\n    margin: 20px auto;\n    display: inline-block;\n    align-self: center;\n  }\n}\n",
                    "styleUrl": "./business-qr.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "business",
                        "type": "BusinessService"
                    },
                    {
                        "name": "activatedRouter",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "business",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRouter",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col-md-8\">\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <h4 class=\"card-title text-primary\">Print your Qr code</h4>\n    </div>\n    <div class=\"card-body\">\n      <ng-container *ngIf=\"data$ | async as data; else loading\">\n        <ng-container\n                      *ngTemplateOutlet=\"preview;context :{id:'print',url: data.url , size: form.value.size , hide: true, business: data.business}\">\n        </ng-container>\n        <form [formGroup]=\"form\">\n\n          <select class=\"form-control\"\n                  formControlName=\"size\">\n            <option *ngFor=\"let opt of sizes\"\n                    [ngValue]=\"opt.size\">\n              {{opt.name}}\n            </option>\n          </select>\n        </form>\n        <div class=\"qr-preview\">\n          <ng-template\n                       *ngTemplateOutlet=\"preview;context :{id:'preview',url: data.url , size: 250, business: data.business}\">\n          </ng-template>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"update ml-auto mr-auto\">\n            <button type=\"submit\"\n                    (click)=\"print(data.business.id)\"\n                    class=\"btn btn-primary btn-round\">Print</button>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n<ng-template #preview\n             let-size=\"size\"\n             let-id=\"id\"\n             let-business=\"business\"\n             let-hide=\"hide\"\n             let-url=\"url\">\n  <div class=\"qr-print-wrapper\"\n       [id]=\"id\"\n       [ngClass]=\"{'hide':hide}\"\n       [style.width.px]=\"size\"\n       #content>\n    <app-brand-image type=\"full-color\"\n                     position=\"center\"\n                     [height]=\"size/3 + 'px'\"></app-brand-image>\n    <ngx-qrcode [elementType]=\"elementType\"\n                [errorCorrectionLevel]=\"correctionLevel\"\n                [value]=\"url\"\n                [width]=\"size\"\n                cssClass=\"bshadow\"></ngx-qrcode>\n    <div class=\"business-name\"\n         [style.height.px]=\"size / 5\"\n         [style.fontSize.px]=\"size / 10\">{{business.name}}</div>\n  </div>\n\n\n</ng-template>\n<ng-template #loading>\n  <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CallbackComponent",
            "id": "component-CallbackComponent-ea2b739110e06bc5bbcc5cd0862ceac6",
            "file": "src/auth/callback.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-callback",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./callback.template.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-callback',\n  templateUrl: './callback.template.html',\n})\n\nexport class CallbackComponent implements OnInit {\n\n  constructor(private aut0: AuthService) { }\n  public ngOnInit() {\n    this.aut0.handleLoginCallback();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "aut0",
                        "type": "AuthService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "aut0",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"callback\">\n    <img src=\"../assets/loading.svg\" alt=\"loading\" />\n</div>\n"
        },
        {
            "name": "CatalogCategoriesComponent",
            "id": "component-CatalogCategoriesComponent-84e9d8ca8bc1aa880395511c6624631c",
            "file": "src/app/views/catalog-categories/catalog-categories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-catalog-categories",
            "styleUrls": [
                "./catalog-categories.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./catalog-categories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-catalog-categories',\n  templateUrl: './catalog-categories.component.html',\n  styleUrls: ['./catalog-categories.component.css'],\n})\nexport class CatalogCategoriesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./catalog-categories.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "CatalogComponent",
            "id": "component-CatalogComponent-9f35bd3b449feae97d37332f928cbbdc",
            "file": "src/app/views/catalog/catalog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-catalog",
            "styleUrls": [
                "./catalog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./catalog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "business$",
                    "type": "Observable<IBusiness>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { IBusiness } from 'src/app/api/business';\nimport { BusinessService } from 'src/app/api/business.service';\n\n@Component({\n  selector: 'app-catalog',\n  templateUrl: './catalog.component.html',\n  styleUrls: ['./catalog.component.css'],\n})\nexport class CatalogComponent implements OnInit {\n\n  public business$: Observable<IBusiness>;\n  constructor(private router: ActivatedRoute, private businessService: BusinessService) { }\n\n  public ngOnInit(): void {\n    this.business$ = this.router.params\n      .pipe(switchMap(({ businessId }) => this.businessService.getById(businessId)));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".active-anchor{\n    color: white;\n}",
                    "styleUrl": "./catalog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-md-3\">\n        <ul class=\"list-group\">\n            <li routerLinkActive=\"active\"\n                [routerLinkActiveOptions]=\"{exact:true}\"\n                class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <a routerLink=\".\"\n                   routerLinkActive=\"active-anchor\"\n                   [routerLinkActiveOptions]=\"{exact:true}\">Resume</a></li>\n            <li routerLinkActive=\"active\"\n                class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <a routerLink=\"categories\"\n                   routerLinkActive=\"active-anchor\">Categories</a></li>\n            <li routerLinkActive=\"active\"\n                class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <a routerLink=\"products\"\n                   routerLinkActive=\"active-anchor\">Products</a></li>\n            <li routerLinkActive=\"active\"\n                class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <a routerLink=\"highlighted-products\"\n                   routerLinkActive=\"active-anchor\">Products offers</a></li>\n        </ul>\n    </div>\n    <div class=\"col-md-9\">\n        <router-outlet></router-outlet>\n    </div>\n</div>"
        },
        {
            "name": "CatalogProductsComponent",
            "id": "component-CatalogProductsComponent-7228ff5521a0a4202ffc70e47a78fb80",
            "file": "src/app/views/catalog-products/catalog-products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-catalog-products",
            "styleUrls": [
                "./catalog-products.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./catalog-products.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-catalog-products',\n  templateUrl: './catalog-products.component.html',\n  styleUrls: ['./catalog-products.component.css'],\n})\nexport class CatalogProductsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./catalog-products.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "CatalogSummaryComponent",
            "id": "component-CatalogSummaryComponent-0ae7807994f6286115704f1a3dc496ef",
            "file": "src/app/views/catalog-summary/catalog-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-catalog-summary",
            "styleUrls": [
                "./catalog-summary.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./catalog-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "businessId$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "catalog$",
                    "type": "Observable<ICategory[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "insertCatalog",
                    "args": [
                        {
                            "name": "data",
                            "type": "InsertFullCatalog"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "InsertFullCatalog",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ICategory } from 'src/app/api/catalog';\nimport { InsertFullCatalog } from 'src/app/api/utils';\nimport { CatalogService } from '../../api/catalog.service';\n\n@Component({\n  selector: 'app-catalog-summary',\n  templateUrl: './catalog-summary.component.html',\n  styleUrls: ['./catalog-summary.component.css'],\n})\nexport class CatalogSummaryComponent implements OnInit {\n\n  public businessId$: Observable<string>;\n  public catalog$: Observable<ICategory[]>;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private catalogService: CatalogService) { }\n\n  public ngOnInit(): void {\n    this.businessId$ = this.activatedRoute.params.pipe(map(({ businessId }) => businessId));\n\n    this.catalog$ = this.businessId$\n      .pipe(switchMap((businessId) => this.catalogService.getCatalog(businessId)));\n  }\n\n  public insertCatalog(data: InsertFullCatalog) {\n    this.catalogService.insertFullCatalog(data).subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./catalog-summary.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "catalogService",
                        "type": "CatalogService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "catalogService",
                        "type": "CatalogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"catalog$ | async as catalog; else loading\">\n    <ul class=\"list-group\"\n        *ngFor=\"let category of catalog\">\n        <li class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-dark\">\n            <a [routerLink]=\"['categories', category.id , 'edit']\">\n                <b>{{category.name}}</b>\n            </a>\n        </li>\n        <li *ngFor=\"let product of category.products\"\n            class=\"list-group-item d-flex justify-content-between align-items-center\">\n            <a [routerLink]=\"['products', product.id , 'edit']\">\n                {{product.name}}\n            </a>\n            <span class=\"badge badge-primary badge-pill\">{{product.price}} €</span>\n        </li>\n    </ul>\n    <div *ngIf=\"!catalog.length\">\n        <app-upload-excel [businessId]=\"businessId$ | async\"\n                          (fileChange)=\"insertCatalog($event)\"></app-upload-excel>\n    </div>\n</div>\n<ng-template #loading>\n    <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "CategoryCreationComponent",
            "id": "component-CategoryCreationComponent-336d706fd833860857b395cad6d61bd4",
            "file": "src/app/views/category-creation/category-creation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-creation",
            "styleUrls": [
                "./category-creation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./category-creation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data$",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "defaultCategory",
                    "type": "ICategory",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "saveCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { BusinessService } from 'src/app/api/business.service';\nimport { ICategory } from '../../api/catalog';\nimport { CatalogService } from '../../api/catalog.service';\nimport { IBusinessLanguage } from './../../api/business.d';\nimport { ILanguage } from './../../api/metadata.d';\nimport { MetadataService } from './../../api/metadata.service';\n\n@Component({\n  selector: 'app-category-creation',\n  templateUrl: './category-creation.component.html',\n  styleUrls: ['./category-creation.component.css'],\n})\nexport class CategoryCreationComponent implements OnInit {\n\n  public defaultCategory: ICategory;\n  public data$: Observable<[ICategory[], ILanguage[], IBusinessLanguage[], string]>;\n  constructor(\n    private catalogService: CatalogService,\n    private metaService: MetadataService,\n    private businessService: BusinessService,\n    private router: Router,\n    private activeRouter: ActivatedRoute) { }\n\n  public ngOnInit(): void {\n    this.defaultCategory = {} as ICategory;\n    this.data$ = this.activeRouter.params\n      .pipe(switchMap(({ businessId }) =>\n        combineLatest([\n          this.catalogService.getCategories(businessId),\n          this.metaService.getLanguages(),\n          this.businessService.getById(businessId).pipe(map(({ languages }) => languages)),\n          this.businessService.getById(businessId).pipe(map(({ default_lang }) => default_lang)),\n        ])));\n  }\n\n  public saveCategory(category: ICategory) {\n\n    const businessId = (this.activeRouter.params as any).value.businessId;\n    category.business_id = businessId;\n    this.catalogService.insertCategory(category)\n      .subscribe(() => this.router.navigate(['../'], { relativeTo: this.activeRouter }));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./category-creation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService"
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"data$ | async as data; else loading\">ƒ\n    <app-category-form (submitForm)=\"saveCategory($event)\"\n                       [categories]=\"data[0]\"\n                       [languages]=\"data[1]\"\n                       [businessLanguages]=\"data[2]\"\n                       [defaultLanguage]=\"data[3]\"\n                       [category]=\"defaultCategory\"></app-category-form>\n</div>\n<ng-template #loading>\n    <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "CategoryEditionComponent",
            "id": "component-CategoryEditionComponent-24d093af353322978a6a3f42c7be41c0",
            "file": "src/app/views/category-edition/category-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-edition",
            "styleUrls": [
                "./category-edition.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./category-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editionData$",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "saveCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { BusinessService } from 'src/app/api/business.service';\nimport { ICategory } from 'src/app/api/catalog';\nimport { CatalogService } from 'src/app/api/catalog.service';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { IBusinessLanguage } from './../../api/business.d';\nimport { MetadataService } from './../../api/metadata.service';\n\n@Component({\n  selector: 'app-category-edition',\n  templateUrl: './category-edition.component.html',\n  styleUrls: ['./category-edition.component.css'],\n})\nexport class CategoryEditionComponent implements OnInit {\n\n  public editionData$: Observable<[\n    ICategory,\n    ICategory[],\n    string,\n    ILanguage[],\n    IBusinessLanguage[],\n    string\n  ]>;\n\n  constructor(\n    private catalogService: CatalogService,\n    private metaService: MetadataService,\n    private businessService: BusinessService,\n    private router: Router,\n    private activeRouter: ActivatedRoute) { }\n\n  public ngOnInit(): void {\n    this.editionData$ =\n      this.activeRouter.params\n        .pipe(\n          mergeMap(({ businessId, categoryId }) =>\n            combineLatest([\n              this.catalogService.getCategoryById(categoryId),\n              this.catalogService.getCategories(businessId),\n              of(businessId),\n              this.metaService.getLanguages(),\n              this.businessService.getById(businessId).pipe(map(({ languages }) => languages)),\n              this.businessService.getById(businessId).pipe(map(({ default_lang }) => default_lang)),\n            ]),\n          ),\n        );\n  }\n\n  public saveCategory(category: ICategory, businessId: string) {\n    this.catalogService.editCategory(category, businessId)\n      .subscribe(() => this.router.navigate(['../..'], { relativeTo: this.activeRouter }));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./category-edition.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService"
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-category-form *ngIf=\"editionData$ | async as data ; else loading\"\n                   [category]=\"data[0]\"\n                   [categories]=\"data[1]\"\n                   [languages]=\"data[3]\"\n                   [businessLanguages]=\"data[4]\"\n                   [defaultLanguage]=\"data[5]\"\n                   (submitForm)=\"saveCategory($event , data[2])\"></app-category-form>\n<ng-template #loading>\n    <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "CategoryFormComponent",
            "id": "component-CategoryFormComponent-81ea8a7aa2375bd8e514ebc00d0867f3",
            "file": "src/app/components/category-form/category-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-form",
            "styleUrls": [
                "./category-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./category-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "businessLanguages",
                    "line": 18,
                    "type": "IBusinessLanguage[]"
                },
                {
                    "name": "categories",
                    "line": 15,
                    "type": "ICategory[]"
                },
                {
                    "name": "category",
                    "line": 14,
                    "type": "ICategory"
                },
                {
                    "name": "defaultLanguage",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "languages",
                    "line": 16,
                    "type": "ILanguage[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitForm",
                    "defaultValue": "new EventEmitter<ICategory>()",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableLanguages",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "categoryForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nameForm",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ICategory } from '../../api/catalog';\nimport { IBusinessLanguage } from './../../api/business.d';\nimport { ILanguage } from './../../api/metadata.d';\n\n@Component({\n  selector: 'app-category-form',\n  templateUrl: './category-form.component.html',\n  styleUrls: ['./category-form.component.css'],\n})\nexport class CategoryFormComponent implements OnInit {\n\n  @Input() public category: ICategory;\n  @Input() public categories: ICategory[];\n  @Input() public languages: ILanguage[];\n  @Input() public defaultLanguage: string;\n  @Input() public businessLanguages: IBusinessLanguage[];\n\n  @Output() public submitForm = new EventEmitter<ICategory>();\n  public categoryForm: FormGroup;\n  public nameForm: FormArray;\n\n  public availableLanguages: any[];\n  constructor(private fb: FormBuilder) { }\n\n  public ngOnInit(): void {\n\n    this.availableLanguages = this.businessLanguages\n      .reduce((acc, current) => {\n        const language = this.languages.find(({ code }) => code === current.language);\n        const currentValue = this.category?.name_languages?.find((cat) => cat.language === current.language)?.value || '';\n        acc.push({ value: currentValue, language: current.language, name: language.name });\n        return acc;\n      }, []);\n    this.nameForm = this.fb\n      .array(this.availableLanguages\n        .map(({ value, name, language }) => this.fb.group({ language, name, value: [value, Validators.required] })));\n\n    this.categoryForm = this.fb.group({\n      id: [this.category?.id],\n      parent_category: [this.category?.parent_category],\n      name_languages: this.nameForm,\n    });\n  }\n\n  public sendForm() {\n    const category: ICategory = {\n      id: this.categoryForm.value.id,\n      parent_category: this.categoryForm.value.parent_category,\n      name: this.nameForm.value.find(({ language }) => language === this.defaultLanguage).value,\n      name_languages: this.nameForm.value.map(({ language, value }) => ({ language, value })),\n    } as ICategory;\n    this.submitForm.emit(category);\n  }\n\n  public get langs(): FormArray {\n    return this.categoryForm.get('name_languages') as FormArray;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./category-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "langs": {
                    "name": "langs",
                    "getSignature": {
                        "name": "langs",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 57
                    }
                }
            },
            "templateData": "<form class=\"col-md-6\"\n      *ngIf=\"categoryForm\"\n      [formGroup]=\"categoryForm\"\n      (ngSubmit)=\"sendForm()\">\n\n    <div class=\"form-group text-right\">\n        <button class=\"btn btn-primary\"\n                [disabled]=\"categoryForm.invalid || nameForm.invalid\"\n                type=\"submit\">Save</button>\n    </div>\n    \n    <div formArrayName=\"name_languages\">\n        <div class=\"form-group\"\n             *ngFor=\"let language of langs.controls; index as i\">\n            <label>Name in {{language.value.name}}</label>\n            <input class=\"form-control\"\n                   [formControl]=\"language.get('value')\" />\n        </div>\n    </div>\n    <div class=\"form-group\"\n         [hidden]=\"!categories || !categories.length\">\n        <label>Type</label>\n        <select class=\"form-control\"\n                formControlName=\"parent_category\">\n            <option [ngValue]=\"null\">No parent</option>\n            <option *ngFor=\"let cat of categories\"\n                    [disabled]=\"cat.id === categoryForm.value.id\"\n                    [value]=\"cat.id\">{{cat.name}}</option>\n        </select>\n    </div>\n</form>"
        },
        {
            "name": "CategoryListComponent",
            "id": "component-CategoryListComponent-521e33323c684b33b15f21335a6305d3",
            "file": "src/app/views/category-list/category-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-list",
            "styleUrls": [
                "./category-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./category-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "businessId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "businessId$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "categories$",
                    "type": "Observable<ICategory[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        },
                        {
                            "name": "list",
                            "type": "ICategory[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "ICategory[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertCatalog",
                    "args": [
                        {
                            "name": "data",
                            "type": "InsertFullCatalog"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "InsertFullCatalog",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "removeCategory",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "string"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICategory } from 'src/app/api/catalog';\nimport { InsertFullCatalog } from 'src/app/api/utils';\nimport { CatalogService } from '../../api/catalog.service';\n\n@Component({\n  selector: 'app-category-list',\n  templateUrl: './category-list.component.html',\n  styleUrls: ['./category-list.component.css'],\n})\nexport class CategoryListComponent implements OnInit {\n\n  public businessId$: Observable<string>;\n  public categories$: Observable<ICategory[]>;\n  public businessId: string;\n  constructor(private router: ActivatedRoute, private catalogService: CatalogService) { }\n\n  public ngOnInit(): void {\n    this.businessId$ = this.router.params.pipe(map(({ businessId }) => businessId));\n\n    this.categories$ = this.businessId$\n      .pipe(\n        tap((businessId) => this.businessId = businessId),\n        switchMap((businessId) => this.catalogService.getCategories(businessId)));\n\n  }\n  public removeCategory(categoryId: string, businessId: string) {\n    const areYoure = confirm('Are your sure ?');\n    if (areYoure) {\n      this.catalogService.removeCategory(categoryId, businessId)\n        .subscribe(() => {\n          this.categories$ = this.catalogService.getCategories(this.businessId);\n        });\n    }\n  }\n  public insertCatalog(data: InsertFullCatalog) {\n    this.catalogService.insertFullCatalog(data).subscribe();\n  }\n  drop(event: CdkDragDrop<string[]>, list: ICategory[]) {\n    const newlist = list.map((category) => Object.assign({}, category));\n    moveItemInArray(newlist, event.previousIndex, event.currentIndex);\n    newlist.forEach((category, index) => {\n      delete (category as any).__typename;\n      delete category.name_languages;\n      category.order = index;\n    });\n    this.catalogService.sortCategories(newlist, newlist[0].business_id)\n      .subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./category-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "catalogService",
                        "type": "CatalogService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "catalogService",
                        "type": "CatalogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"card-header\">\n    <h4 class=\"card-title\">Categories</h4>\n  </div>\n  <div class=\"card-body\">\n    <div class=\"table-responsive\">\n      <table class=\"table\"\n             (cdkDropListDropped)=\"drop($event, categories)\"\n             cdkDropList\n             *ngIf=\"categories$ | async as categories; else loading\">\n        <tr *ngIf=\"categories.length\">\n          <th><a [routerLink]=\"['create']\">+</a></th>\n          <th>Name</th>\n          <th>Edit</th>\n          <th>Delete</th>\n        </tr>\n        <tr cdkDrag\n            *ngFor=\"let category of categories\">\n          <td colspan=\"2\">{{category.name}}</td>\n          <td><a [routerLink]=\"[category.id, 'edit']\">Edit</a></td>\n          <td><a routerLink=\".\"\n               (click)=\"removeCategory(category.id, category.business_id)\">Delete</a></td>\n        </tr>\n        <tr *ngIf=\"!categories.length\">\n          <td>There are any category <a [routerLink]=\"['create']\">create your first one</a></td>\n        </tr>\n        <tr *ngIf=\"!categories.length\">\n          <td>\n            <app-upload-excel [businessId]=\"businessId$ | async\"\n                              (fileChange)=\"insertCatalog($event)\"></app-upload-excel>\n          </td>\n        </tr>\n      </table>\n      <ng-template #loading>\n        <app-loader></app-loader>\n      </ng-template>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "FixedPluginComponent",
            "id": "component-FixedPluginComponent-dafd4ef3f354f4c203f1237e38c0826f",
            "file": "src/app/shared/fixedplugin/fixedplugin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "fixedplugin-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "fixedplugin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sidebarActiveColor",
                    "defaultValue": "\"danger\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sidebarColor",
                    "defaultValue": "\"white\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSidebarActiveColor",
                    "args": [
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSidebarColor",
                    "args": [
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n    moduleId: module.id,\n    selector: 'fixedplugin-cmp',\n    templateUrl: 'fixedplugin.component.html'\n})\n\nexport class FixedPluginComponent implements OnInit{\n\n  public sidebarColor: string = \"white\";\n  public sidebarActiveColor: string = \"danger\";\n\n  public state: boolean = true;\n\n  changeSidebarColor(color){\n    var sidebar = <HTMLElement>document.querySelector('.sidebar');\n\n    this.sidebarColor = color;\n    if(sidebar != undefined){\n        sidebar.setAttribute('data-color',color);\n    }\n  }\n  changeSidebarActiveColor(color){\n    var sidebar = <HTMLElement>document.querySelector('.sidebar');\n    this.sidebarActiveColor = color;\n    if(sidebar != undefined){\n        sidebar.setAttribute('data-active-color',color);\n    }\n  }\n  ngOnInit(){}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"fixed-plugin\">\n    <div class=\"show-dropdown\" ngbDropdown>\n        <a href=\"javascript:void(0)\" ngbDropdownToggle id=\"dropdownConfig\">\n          <i class=\"fa fa-cog fa-2x\"> </i>\n        </a>\n        <ul class=\"\" ngbDropdownMenu aria-labelledby=\"dropdownConfig\">\n            <li class=\"header-title\">Sidebar Background</li>\n            <li class=\"adjustments-line text-center\">\n                <a href=\"javascript:void(0)\" class=\"switch-trigger background-color\">\n                    <span class=\"badge filter badge-light active\" [ngClass]=\"{'active':sidebarColor==='white'}\" (click)=\"changeSidebarColor('white')\"></span>\n                    <span class=\"badge filter badge-dark\" [ngClass]=\"{'active':sidebarColor==='black'}\" (click)=\"changeSidebarColor('black')\"></span>\n                </a>\n            </li>\n\n\t          <li class=\"header-title\">Sidebar Active Color</li>\n            <li class=\"adjustments-line text-center\">\n                <a href=\"javascript:void(0)\" class=\"switch-trigger active-color\">\n                    <span class=\"badge filter badge-primary\" [ngClass]=\"{'active':sidebarActiveColor==='primary'}\" (click)=\"changeSidebarActiveColor('primary')\"></span>\n                    <span class=\"badge filter badge-info\" [ngClass]=\"{'active':sidebarActiveColor==='info'}\" (click)=\"changeSidebarActiveColor('info')\"></span>\n                    <span class=\"badge filter badge-success\" [ngClass]=\"{'active':sidebarActiveColor==='success'}\" (click)=\"changeSidebarActiveColor('success')\"></span>\n                    <span class=\"badge filter badge-warning\" [ngClass]=\"{'active':sidebarActiveColor==='warning'}\" (click)=\"changeSidebarActiveColor('warning')\"></span>\n                    <span class=\"badge filter badge-danger active\" [ngClass]=\"{'active':sidebarActiveColor==='danger'}\" (click)=\"changeSidebarActiveColor('danger')\"></span>\n                </a>\n            </li>\n\n        </ul>\n    </div>\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-68a00c4627542f4a2b4ec82455ae7302",
            "file": "src/app/shared/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "footer-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "version",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "test",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    moduleId: module.id,\n    selector: 'footer-cmp',\n    templateUrl: 'footer.component.html',\n})\n\nexport class FooterComponent {\n    @Input() public name: string;\n    @Input() public version: string;\n    public test = new Date();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<footer class=\"footer\">\n    <div class=\"container-fluid\">\n        <nav class=\"pull-left\">\n            <ul>\n                <li>\n                    <a target=\"_blank\"\n                       href=\"https://latevacarta.click\">\n                        Corporate web\n                    </a>\n                </li>\n                <li>\n                    <a target=\"_blank\"\n                       href=\"https://latevacarta.click/blog\">\n                        Blog\n                    </a>\n                </li>\n                <li>\n                    <a target=\"_blank\"\n                       href=\"https://latevacarta.click\">\n                        Licenses\n                    </a>\n                </li>\n            </ul>\n        </nav>\n        <div class=\"copyright pull-right\">\n            &copy; {{test | date: 'yyyy'}} {{name}} - {{version}}\n        </div>\n    </div>\n</footer>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-4f538533ce13b07e3bde36137795a5ff",
            "file": "src/app/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isUserLogged",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "user",
                    "line": 16,
                    "type": "IAccount"
                }
            ],
            "outputsClass": [
                {
                    "name": "loginHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "logoutHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isMaingPage",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { EXPIRES_AT_KEY, TOKEN_ID, TOKEN_KEY, USER_ID } from 'src/auth/auth.service';\nimport { IAccount } from './api/account.d';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-header',\n  styleUrls: ['./header.component.scss'],\n  templateUrl: './header.component.html',\n})\n\nexport class HeaderComponent implements OnInit {\n  @Input() public title: string;\n  @Input() public user: IAccount;\n  @Input() public isUserLogged: boolean;\n  @Output() public logoutHandler: EventEmitter<any> = new EventEmitter();\n  @Output() public loginHandler: EventEmitter<any> = new EventEmitter();\n\n  public isMaingPage: boolean;\n\n  public get isLoggedUserInError(): boolean {\n    return !this.isUserLogged &&\n      (\n        Boolean(localStorage.getItem(EXPIRES_AT_KEY)),\n        Boolean(localStorage.getItem(TOKEN_KEY)),\n        Boolean(localStorage.getItem(TOKEN_ID)),\n        Boolean(localStorage.getItem(USER_ID))\n      );\n  }\n\n  constructor(\n    private activeRouter: Router,\n    private location: Location,\n    private cdr: ChangeDetectorRef) { }\n\n  public ngOnInit() {\n    this.activeRouter.events.subscribe((event) => {\n      if (event instanceof NavigationEnd) {\n        if (event.url === '/') {\n          this.isMaingPage = true;\n        } else {\n          this.isMaingPage = false;\n        }\n        this.cdr.detectChanges();\n      }\n    });\n  }\n\n  public logout() {\n    this.logoutHandler.emit();\n  }\n  public login() {\n    this.loginHandler.emit();\n  }\n  public goBack() {\n    this.location.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navbar-brand {\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activeRouter",
                        "type": "Router"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "activeRouter",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isLoggedUserInError": {
                    "name": "isLoggedUserInError",
                    "getSignature": {
                        "name": "isLoggedUserInError",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23
                    }
                }
            },
            "templateData": "<header>\n  <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top\">\n    <a class=\"navbar-brand\"\n       *ngIf=\"!isMaingPage\"\n       (click)=\"goBack()\">&lt;</a>\n    <a class=\"navbar-brand\"\n       routerLink=\"/\">\n      <img src=\"../assets/brand/latevacarta_imago-color.svg\"\n           width=\"30\"\n           height=\"30\"\n           class=\"d-inline-block align-top\"\n           alt=\"\">\n      <app-brand-image height=\"30\"\n                       class=\"d-inline-block align-top\"\n                       type=\"imago-color\"></app-brand-image>\n      <img height=\"40\"\n           src=\"../assets//brand/latevacarta_horizontal-negative.svg\">\n    </a>\n    <ul class=\"navbar-nav ml-auto\">\n      <li class=\"nav-item\"\n          *ngIf=\"!isUserLogged\">\n        <a class=\"nav-link\">\n          <button type=\"button\"\n                  class=\"btn btn-outline-light btn-sm\"\n                  (click)=\"login()\">Login</button></a>\n      </li>\n      <li class=\"nav-item\"\n          *ngIf=\"isLoggedUserInError\">\n        <a class=\"nav-link\">\n          <button type=\"button\"\n                  class=\"btn btn-outline-light btn-sm\"\n                  (click)=\"login()\">Logout</button></a>\n      </li>\n      <li class=\"nav-item dropdown\"\n          *ngIf=\"isUserLogged && user\">\n        <a class=\"nav-link dropdown-toggle\"\n           id=\"navbarDropdown\"\n           role=\"button\"\n           data-toggle=\"dropdown\"\n           aria-haspopup=\"true\"\n           aria-expanded=\"false\">\n          <img [src]=\"user.thumbnail\"\n               width=\"30\"\n               height=\"30\" /> {{user.username }}</a>\n        <div class=\"dropdown-menu dropdown-menu-right text-right\"\n             aria-labelledby=\"navbarDropdown\">\n          <a class=\"dropdown-item\"\n             routerLink=\"/account\"\n             href=\"#\">Account</a>\n          <a class=\"dropdown-item\">\n            <button id=\"qsLogoutBtn\"\n                    type=\"button\"\n                    class=\"btn-margin logoutBtn btn btn-danger\"\n                    (click)=\"logout()\">Log Out</button></a>\n        </div>\n      </li>\n    </ul>\n  </nav>\n</header>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2-1",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-f9bba964e20f158db3efaf9802ad4fd9",
            "file": "src/app/components/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loader",
            "styleUrls": [
                "./loader.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.css'],\n})\nexport class LoaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./loader.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<img src=\"../../../assets/loading.svg\"\n     width=\"100\"\n     height=\"100\" />"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-dd9c80754974cdb85daddd2c8827fb38",
            "file": "src/app/views/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [
                "main.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account$",
                    "type": "Observable<IAccount>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "accounts$",
                    "type": "Observable<IAccount[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "business$",
                    "type": "Observable<IBusiness[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IAccount } from 'src/app/api/account';\nimport { AccountService } from '../../api/account.service';\nimport { IBusiness } from '../../api/business';\nimport { BusinessService } from './../../api/business.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: 'main.component.html',\n  styleUrls: ['main.component.css'],\n})\nexport class MainComponent implements OnInit {\n\n  public business$: Observable<IBusiness[]>;\n  public account$: Observable<IAccount>;\n  public accounts$: Observable<IAccount[]>;\n\n  constructor(\n    private accountService: AccountService,\n    private businessService: BusinessService) {\n  }\n\n  public ngOnInit() {\n    this.business$ = this.businessService.getAll();\n    this.account$ = this.accountService.getAccount();\n    this.accounts$ = this.accountService.getAccounts();\n  }\n\n  public get isAdmin() {\n    return this.accountService.isAdmin;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "main.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isAdmin": {
                    "name": "isAdmin",
                    "getSignature": {
                        "name": "isAdmin",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            },
            "templateData": "<div class=\"row\">\n\n  <div class=\"col-md-4 mt-3\">\n    <div class=\"card card-stats\">\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-5 col-md-4\">\n            <div class=\"icon-big text-center icon-warning\">\n              <i class=\"nc-icon nc-single-02 text-danger\"></i>\n            </div>\n          </div>\n          <div class=\"col-7 col-md-8\"\n               *ngIf=\"account$ | async as account ; else loading\">\n            <div class=\"numbers\">\n              <p class=\"card-category\">Hello</p>\n              <p class=\"card-title\">{{account.name}}\n              <p>\n            </div>\n          </div>\n        </div>\n\n\n      </div>\n      <div class=\"card-footer\">\n        <hr>\n        <a routerLink=\"account\">\n          Go\n        </a>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-4 mt-3\"\n       *ngIf=\"isAdmin\">\n    <div class=\"card card-stats\">\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-5 col-md-4\">\n            <div class=\"icon-big text-center icon-warning\">\n              <i class=\"nc-icon nc-laptop text-info\"></i>\n            </div>\n          </div>\n          <div class=\"col-7 col-md-8\"\n               *ngIf=\"accounts$ | async as account ; else loading\">\n            <div class=\"numbers\">\n              <p class=\"card-category\">Accounts</p>\n              <p class=\"card-title\">x{{account.length}}\n              <p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <hr>\n        <a routerLink=\"account-list\">\n          Go\n        </a>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-md-4 mt-3\">\n    <div class=\"card card-stats\">\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-5 col-md-4\">\n            <div class=\"icon-big text-center icon-warning\">\n              <i class=\"nc-icon nc-shop text-warning\"></i>\n            </div>\n          </div>\n          <div class=\"col-7 col-md-8\"\n               *ngIf=\"business$ | async as business; else loading \">\n            <div class=\"numbers\">\n              <p class=\"card-category\">Business</p>\n              <p class=\"card-title\">x{{business.length}}\n              <p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <hr>\n        <a routerLink=\"business\">\n          Go\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #loading>\n  <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-658d8854071e48cccf7ba1f5589a5157",
            "file": "src/app/shared/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "navbar-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isUserLogged",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "user",
                    "line": 18,
                    "type": "IAccount"
                }
            ],
            "outputsClass": [
                {
                    "name": "loginHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "logoutHandler",
                    "defaultValue": "new EventEmitter()",
                    "line": 20,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "button",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navbar-cmp', {static: false}"
                        }
                    ]
                },
                {
                    "name": "isCollapsed",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isMaingPage",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "listTitles",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "nativeElement",
                    "type": "Node",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sidebarVisible",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "toggleButton",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "getTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "sidebarClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "sidebarOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "sidebarToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { ChangeDetectorRef, EventEmitter, Input, Output } from '@angular/core';\nimport { Component, ElementRef, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { IAccount } from 'src/app/api/account';\nimport { EXPIRES_AT_KEY, TOKEN_ID, TOKEN_KEY, USER_ID } from 'src/auth/auth.service';\nimport { ROUTES } from '../../sidebar/sidebar.component';\n\n@Component({\n  moduleId: module.id,\n  selector: 'navbar-cmp',\n  templateUrl: 'navbar.component.html',\n})\n\nexport class NavbarComponent implements OnInit {\n\n  @Input() public title: string;\n  @Input() public user: IAccount;\n  @Input() public isUserLogged: boolean;\n  @Output() public logoutHandler: EventEmitter<any> = new EventEmitter();\n  @Output() public loginHandler: EventEmitter<any> = new EventEmitter();\n\n  public isMaingPage: boolean;\n\n  public get isLoggedUserInError(): boolean {\n    return !this.isUserLogged &&\n      (\n        Boolean(localStorage.getItem(EXPIRES_AT_KEY)),\n        Boolean(localStorage.getItem(TOKEN_KEY)),\n        Boolean(localStorage.getItem(TOKEN_ID)),\n        Boolean(localStorage.getItem(USER_ID))\n      );\n  }\n\n  private listTitles: any[];\n  private nativeElement: Node;\n  private toggleButton;\n  private sidebarVisible: boolean;\n\n  public isCollapsed = true;\n  @ViewChild('navbar-cmp', { static: false }) button;\n\n  constructor(\n    private location: Location,\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private cdr: ChangeDetectorRef,\n    private router: Router) {\n    this.nativeElement = element.nativeElement;\n    this.sidebarVisible = false;\n  }\n\n  ngOnInit() {\n    this.router.events.subscribe((event) => {\n      if (event instanceof NavigationEnd) {\n        if (event.url === '/') {\n          this.isMaingPage = true;\n        } else {\n          this.isMaingPage = false;\n        }\n        this.cdr.detectChanges();\n      }\n    });\n    this.listTitles = ROUTES.filter((listTitle) => listTitle);\n    const navbar: HTMLElement = this.element.nativeElement;\n    this.toggleButton = navbar.getElementsByClassName('navbar-toggle')[0];\n    this.router.events.subscribe((event) => {\n      this.sidebarClose();\n    });\n  }\n  getTitle() {\n    // let titlee = this.location.prepareExternalUrl(this.location.path());\n    // if (titlee.charAt(0) === '/') {\n    //   titlee = titlee.slice(1);\n    // }\n    // console.log(titlee);\n    // // tslint:disable-next-line:prefer-for-of\n    // for (let item = 0; item < this.listTitles.length; item++) {\n    //   if (this.listTitles[item].path === titlee) {\n    //     return this.listTitles[item].title;\n    //   }\n    // }\n    return 'Dashboard';\n  }\n  sidebarToggle() {\n    if (this.sidebarVisible === false) {\n      this.sidebarOpen();\n    } else {\n      this.sidebarClose();\n    }\n  }\n  sidebarOpen() {\n    const toggleButton = this.toggleButton;\n    const html = document.getElementsByTagName('html')[0];\n    const mainPanel = document.getElementsByClassName('main-panel')[0] as HTMLElement;\n    setTimeout(() => {\n      toggleButton.classList.add('toggled');\n    }, 500);\n\n    html.classList.add('nav-open');\n    if (window.innerWidth < 991) {\n      mainPanel.style.position = 'fixed';\n    }\n    this.sidebarVisible = true;\n  }\n  sidebarClose() {\n    const html = document.getElementsByTagName('html')[0];\n    const mainPanel = document.getElementsByClassName('main-panel')[0] as HTMLElement;\n    if (window.innerWidth < 991) {\n      setTimeout(() => {\n        mainPanel.style.position = '';\n      }, 500);\n    }\n    this.toggleButton.classList.remove('toggled');\n    this.sidebarVisible = false;\n    html.classList.remove('nav-open');\n  }\n  collapse() {\n    this.isCollapsed = !this.isCollapsed;\n    const navbar = document.getElementsByTagName('nav')[0];\n    if (!this.isCollapsed) {\n      navbar.classList.remove('navbar-transparent');\n      navbar.classList.add('bg-white');\n    } else {\n      navbar.classList.add('navbar-transparent');\n      navbar.classList.remove('bg-white');\n    }\n\n  }\n  public logout() {\n    this.logoutHandler.emit();\n  }\n  public login() {\n    this.loginHandler.emit();\n  }\n  public goBack() {\n    this.location.back();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isLoggedUserInError": {
                    "name": "isLoggedUserInError",
                    "getSignature": {
                        "name": "isLoggedUserInError",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                }
            },
            "templateData": "<nav class=\"navbar navbar-expand-lg navbar-absolute fixed-top navbar-transparent\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-wrapper\">\n      <div class=\"navbar-toggle\">\n        <button type=\"button\"\n                class=\"navbar-toggler\"\n                (click)=\"sidebarToggle()\">\n          <span class=\"navbar-toggler-bar bar1\"></span>\n          <span class=\"navbar-toggler-bar bar2\"></span>\n          <span class=\"navbar-toggler-bar bar3\"></span>\n        </button>\n      </div>\n      <a class=\"navbar-brand\"\n         href=\"javascript:void(0)\">{{getTitle()}}</a>\n    </div>\n    <button class=\"navbar-toggler\"\n            type=\"button\"\n            (click)=\"collapse()\"\n            [attr.aria-expanded]=\"!isCollapsed\"\n            aria-controls=\"collapseExample\">\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse justify-content-end\"\n         id=\"collapseExample\"\n         [ngbCollapse]=\"isCollapsed\">\n      <ul class=\"navbar-nav\"\n          *ngIf=\"user\">\n        <li class=\"nav-item btn-rotate\"\n            ngbDropdown\n            placement=\"bottom-left\">\n          <a class=\"nav-link\"\n             ngbDropdownToggle\n             id=\"navbarDropdownMenuLink\">\n            <img [src]=\"user.thumbnail\"\n                 width=\"30\"\n                 height=\"30\" />\n          </a>\n          <div ngbDropdownMenu\n               aria-labelledby=\"navbarDropdownMenuLink\"\n               class=\"dropdown-menu dropdown-menu-right\">\n            <a ngbDropdownItem\n               [routerLink]=\"['account','edit']\">Edit</a>\n            <a ngbDropdownItem\n               (click)=\"logout()\">Logout</a>\n          </div>\n        </li>\n        <!-- <li class=\"nav-item\">\n          <a class=\"nav-link btn-rotate\" href=\"javascript:void(0)\">\n            <i class=\"nc-icon nc-settings-gear-65\"></i>\n            <p>\n              <span class=\"d-lg-none d-md-block\">Account</span>\n            </p>\n          </a>\n        </li> -->\n      </ul>\n    </div>\n  </div>\n</nav>"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-baeaad015fc7fa929393053c35c71f7f",
            "file": "src/app/views/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [
                "./not-found.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css'],\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./not-found.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>not-found works!</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProductCreationComponent",
            "id": "component-ProductCreationComponent-9cf77a059db158ae71d60991a975a90d",
            "file": "src/app/views/product-creation/product-creation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-creation",
            "styleUrls": [
                "./product-creation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-creation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "businessId$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data$",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "defaultProduct",
                    "type": "IProduct",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "saveProduct",
                    "args": [
                        {
                            "name": "category",
                            "type": "IProduct"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "IProduct",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IBusinessLanguage } from 'src/app/api/business';\nimport { BusinessService } from 'src/app/api/business.service';\nimport { CatalogService } from 'src/app/api/catalog.service';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { MetadataService } from 'src/app/api/metadata.service';\nimport { ICategory, IProduct } from '../../api/catalog';\n\n@Component({\n  selector: 'app-product-creation',\n  templateUrl: './product-creation.component.html',\n  styleUrls: ['./product-creation.component.css'],\n})\nexport class ProductCreationComponent implements OnInit {\n\n  public defaultProduct: IProduct;\n  public data$: Observable<[ICategory[], ILanguage[], IBusinessLanguage[], string]>;\n  public businessId$: Observable<string>;\n  constructor(\n    private catalogService: CatalogService,\n    private metaService: MetadataService,\n    private businessService: BusinessService,\n    private router: Router,\n    private activeRouter: ActivatedRoute) { }\n\n  public ngOnInit(): void {\n    this.businessId$ = this.activeRouter.params.pipe(map(({ businessId }) => businessId));\n    this.data$ = this.businessId$\n      .pipe(\n        switchMap((businessId) =>\n          combineLatest([\n            this.catalogService.getCategories(businessId),\n            this.metaService.getLanguages(),\n            this.businessService.getById(businessId).pipe(map(({ languages }) => languages)),\n            this.businessService.getById(businessId).pipe(map(({ default_lang }) => default_lang)),\n          ])));\n  }\n\n  public saveProduct(category: IProduct) {\n    this.catalogService.insertProduct(category)\n      .subscribe(() => this.router.navigate(['../'], { relativeTo: this.activeRouter }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-creation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService"
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-product-form (submitForm)=\"saveProduct($event)\"\n                  *ngIf=\"data$ | async as data ; else loading\"\n                  [categories]=\"data[0]\"\n                  [languages]=\"data[1]\"\n                  [businessId]=\"businessId$ | async\"\n                  [businessLanguages]=\"data[2]\"\n                  [defaultLanguage]=\"data[3]\"\n                  [product]=\"defaultProduct\"></app-product-form>\n<ng-template #loading>\n    <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "ProductEditionComponent",
            "id": "component-ProductEditionComponent-f57ceb1ea524357d49cba80490f15371",
            "file": "src/app/views/product-edition/product-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-edition",
            "styleUrls": [
                "./product-edition.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editionData$",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "saveProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "IProduct"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "IProduct",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { IBusinessLanguage } from 'src/app/api/business';\nimport { BusinessService } from 'src/app/api/business.service';\nimport { ICategory, IProduct } from 'src/app/api/catalog';\nimport { CatalogService } from 'src/app/api/catalog.service';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { MetadataService } from 'src/app/api/metadata.service';\n\n@Component({\n  selector: 'app-product-edition',\n  templateUrl: './product-edition.component.html',\n  styleUrls: ['./product-edition.component.css'],\n})\nexport class ProductEditionComponent implements OnInit {\n\n  public editionData$: Observable<[IProduct, ICategory[], ILanguage[], IBusinessLanguage[], string]>;\n\n  constructor(\n    private catalogService: CatalogService,\n    private metaService: MetadataService,\n    private businessService: BusinessService,\n    private router: Router,\n    private activeRouter: ActivatedRoute) { }\n\n  public ngOnInit(): void {\n    this.editionData$ =\n      this.activeRouter.params\n        .pipe(\n          mergeMap(({ businessId, productId }) =>\n            combineLatest([\n              this.catalogService.getProductById(productId),\n              this.catalogService.getCategories(businessId),\n              this.metaService.getLanguages(),\n              this.businessService.getById(businessId).pipe(map(({ languages }) => languages)),\n              this.businessService.getById(businessId).pipe(map(({ default_lang }) => default_lang)),\n            ]),\n          ),\n        );\n\n  }\n\n  public saveProduct(product: IProduct) {\n    this.catalogService.editProduct(product)\n      .subscribe(() => this.router.navigate(['../../'], { relativeTo: this.activeRouter }));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-edition.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService"
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService"
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "MetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "businessService",
                        "type": "BusinessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeRouter",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-product-form *ngIf=\"editionData$ | async as data ; else loading\"\n                  [product]=\"data[0]\"\n                  [categories]=\"data[1]\"\n                  [languages]=\"data[2]\"\n                  [businessLanguages]=\"data[3]\"\n                  [defaultLanguage]=\"data[4]\"\n                  (submitForm)=\"saveProduct($event)\"></app-product-form>\n<ng-template #loading>\n    <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "ProductFormComponent",
            "id": "component-ProductFormComponent-86fdbc4a7474c47936d9e3297e2983e1",
            "file": "src/app/components/product-form/product-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-form",
            "styleUrls": [
                "./product-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "businessId",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "businessLanguages",
                    "line": 20,
                    "type": "IBusinessLanguage[]"
                },
                {
                    "name": "categories",
                    "line": 16,
                    "type": "ICategory[]"
                },
                {
                    "name": "defaultLanguage",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "languages",
                    "line": 17,
                    "type": "ILanguage[]"
                },
                {
                    "name": "product",
                    "line": 15,
                    "type": "IProduct"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitForm",
                    "defaultValue": "new EventEmitter<IProduct>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableLanguages",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "descriptionForm",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nameForm",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "productCopy",
                    "type": "IProduct",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "productForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "InputEvent"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "InputEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IBusinessLanguage } from 'src/app/api/business';\nimport { ILanguage } from 'src/app/api/metadata';\nimport { UploadFileService } from 'src/app/api/upload-file.service';\nimport { ICategory, IProduct } from '../../api/catalog';\n\n@Component({\n  selector: 'app-product-form',\n  templateUrl: './product-form.component.html',\n  styleUrls: ['./product-form.component.css'],\n})\nexport class ProductFormComponent implements OnInit {\n\n  @Input() public product: IProduct;\n  @Input() public categories: ICategory[];\n  @Input() public languages: ILanguage[];\n  @Input() public defaultLanguage: string;\n  @Input() public businessId: string;\n  @Input() public businessLanguages: IBusinessLanguage[];\n\n  @Output() public submitForm = new EventEmitter<IProduct>();\n  public productForm: FormGroup;\n  public nameForm: FormArray;\n  public descriptionForm: FormArray;\n  public availableLanguages: any[];\n  public productCopy: IProduct;\n  constructor(private fb: FormBuilder, private uploadFileService: UploadFileService) { }\n\n  public ngOnInit(): void {\n    this.productCopy = { ...this.product };\n    this.availableLanguages = this.businessLanguages\n      .reduce((acc, current) => {\n        const language = this.languages.find(({ code }) => code === current.language);\n        const nameValue = this.product?.name_languages?.find((cat) => cat.language === current.language)?.value || '';\n        const descriptionValue = this.product?.description_languages?.find((cat) => cat.language === current.language)?.value || '';\n        acc.push({ nameValue, descriptionValue, language: current.language, name: language.name });\n        return acc;\n      }, []);\n    this.nameForm = this.fb\n      .array(this.availableLanguages\n        .map(({ nameValue: value, name, language }) => this.fb.group({ language, name, value: [value, Validators.required] })));\n\n    this.descriptionForm = this.fb\n      .array(this.availableLanguages\n        .map(({ descriptionValue: value, name, language }) => this.fb.group({ language, name, value })));\n\n    this.productForm = this.fb.group({\n      id: [this.product?.id],\n      name: [this.product?.name],\n      description: [this.product?.description],\n      category_id: [this.product?.category_id, Validators.required],\n      is_active: [this.product?.is_active || true],\n      feature_image: [this.product?.feature_image, ''],\n      price: [this.product?.price],\n      business_id: [this.product?.business_id],\n      name_languages: this.nameForm,\n      description_languages: this.descriptionForm,\n      featured_image: [this.product?.feature_image],\n    });\n  }\n\n  public get langs(): FormArray {\n    return this.productForm.get('name_languages') as FormArray;\n  }\n  public sendForm() {\n    const product = {\n      id: this.productForm.value.id,\n      name: this.nameForm.value.find(({ language }) => language === this.defaultLanguage).value,\n      description: this.descriptionForm.value.find(({ language }) => language === this.defaultLanguage).value,\n      category_id: this.productForm.value.category_id,\n      is_active: this.productForm.value.is_active,\n      feature_image: this.productForm.value.feature_image,\n      price: this.productForm.value.price,\n      business_id: this.productForm.value.business_id,\n      name_languages: this.nameForm.value.map(({ language, value }) => ({ language, value })),\n      description_languages: this.descriptionForm.value.map(({ language, value }) => ({ language, value })),\n    } as IProduct;\n    // name_languages: this.nameForm.value.map(({ language, value }) => ({ language, value }))\n    this.submitForm.emit(product);\n  }\n\n  public selectFile(event: InputEvent, type: string) {\n    const file = (event.target as any).files[0];\n    this.uploadFileService.upload(type, this.businessId, file)\n      .subscribe(\n        ({ Location }: any) => {\n          if (!this.productCopy) {\n            this.productCopy = {} as IProduct;\n          }\n          this.productCopy.feature_image = Location;\n          this.productForm.patchValue({ feature_image: Location });\n        },\n      );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "uploadFileService",
                        "type": "UploadFileService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uploadFileService",
                        "type": "UploadFileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "langs": {
                    "name": "langs",
                    "getSignature": {
                        "name": "langs",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 63
                    }
                }
            },
            "templateData": "<form class=\"col-lg-6\"\n      [formGroup]=\"productForm\"\n      (ngSubmit)=\"sendForm()\">\n\n    <div class=\"form-group text-right\">\n        <button class=\"btn btn-primary\"\n                [disabled]=\"productForm.invalid || nameForm.invalid\"\n                type=\"submit\">Save</button>\n    </div>\n    <!-- <div class=\"form-group\">\n        <label>Name</label>\n        <input class=\"form-control\"\n               formControlName=\"name\" />\n    </div> -->\n    <div formArrayName=\"name_languages\">\n        <div class=\"form-group\"\n             *ngFor=\"let language of nameForm.controls; index as i\">\n            <label>Name in {{language.value.name}}</label>\n            <input class=\"form-control\"\n                   [formControl]=\"language.get('value')\" />\n        </div>\n    </div>\n    <!-- <div class=\"form-group\">\n        <label>Description</label>\n        <input class=\"form-control\"\n        formControlName=\"description\" />\n    </div> -->\n    <div class=\"form-group\">\n        <label>Logo</label>\n        <div *ngIf=\"productCopy?.feature_image\">\n            <img [src]=\"productCopy?.feature_image\"\n                 width=\"150\">\n        </div>\n        <input class=\"form-control\"\n               type=\"file\"\n               (change)=\"selectFile($event, 'products')\" />\n    </div>\n    <div formArrayName=\"description_languages\">\n        <div class=\"form-group\"\n             *ngFor=\"let language of descriptionForm.controls; index as i\">\n            <label>Description in {{language.value.name}}</label>\n            <input class=\"form-control\"\n                   [formControl]=\"language.get('value')\" />\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label>Price</label>\n        <input class=\"form-control\"\n               type=\"number\"\n               formControlName=\"price\" />\n    </div>\n    <div class=\"form-group\">\n        <label>Display</label>\n        <input class=\"form-control\"\n               type=\"checkbox\"\n               formControlName=\"is_active\" />\n    </div>\n    <div class=\"form-group\"\n         [hidden]=\"!categories || !categories.length\">\n        <label>Category</label>\n        <select class=\"form-control\"\n                formControlName=\"category_id\">\n            <option *ngFor=\"let cat of categories\"\n                    [disabled]=\"cat.id === productForm.value.category_id\"\n                    [value]=\"cat.id\">{{cat.name}}</option>\n        </select>\n    </div>\n</form>"
        },
        {
            "name": "ProductHighlightComponent",
            "id": "component-ProductHighlightComponent-32f97036b7678b70ff9d21392a146295",
            "file": "src/app/views/product-highlight/product-highlight.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-highlight",
            "styleUrls": [
                "./product-highlight.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-highlight.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "highlightedProducts$",
                    "type": "Observable<AbstractControl[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "products$",
                    "type": "Observable<IProduct[]>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { CatalogService } from 'src/app/api/catalog.service';\nimport { IProduct } from './../../api/catalog.d';\n\nconst MAX_HIGHLIGHTED_PRODUCTS = 4;\n\n@Component({\n  selector: 'app-product-highlight',\n  templateUrl: './product-highlight.component.html',\n  styleUrls: ['./product-highlight.component.css'],\n})\nexport class ProductHighlightComponent implements OnInit {\n\n  public highlightedProducts$: Observable<AbstractControl[]>;\n  public products$: Observable<IProduct[]>;\n  public form: FormArray;\n\n  public get canAddMore(): boolean {\n    return this.form?.value?.length < MAX_HIGHLIGHTED_PRODUCTS;\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private catalogService: CatalogService) { }\n\n  public ngOnInit(): void {\n\n    this.form = this.fb.array([]);\n\n    this.highlightedProducts$ = this.activatedRoute.params\n      .pipe(\n        switchMap(({ businessId }) => this.catalogService.getHightlightProducts(businessId)),\n        tap((products) => products.map((prod) => this.form.push(this.fb.control(prod.product_id)))),\n        map(() => this.form.controls),\n      );\n    this.products$ = this.activatedRoute.params\n      .pipe(switchMap(({ businessId }) => this.catalogService.getProducts(businessId)),\n    );\n  }\n\n  public add() {\n    if (this.canAddMore) {\n      this.form.push(this.fb.control(''));\n    }\n  }\n\n  public remove(index: number) {\n    this.form.removeAt(index);\n  }\n\n  public sendForm() {\n    const businessId = (this.activatedRoute.params as any).value.businessId;\n    this.catalogService.addHighlightProducts(this.form.value, businessId)\n      .subscribe(() => this.router.navigate(['../../'], { relativeTo: this.activatedRoute }));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-highlight.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "catalogService",
                        "type": "CatalogService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "catalogService",
                        "type": "CatalogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "canAddMore": {
                    "name": "canAddMore",
                    "getSignature": {
                        "name": "canAddMore",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 22
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"(products$ | async) as products; else loader\">\n  <form [formGroup]=\"form\"\n        *ngIf=\"products && products.length; else noProducts\"\n        (ngSubmit)=\"sendForm()\"\n        class=\"form-group\">\n    <div class=\"form-group text-right\">\n      <button class=\"btn btn-primary\"\n              type=\"submit\">Save</button>\n    </div>\n    <div class=\"form-group\"\n         *ngFor=\"let highlightProduct of highlightedProducts$ | async; index as index\">\n      <select class=\"form-control\"\n              [formControl]=\"highlightProduct\">\n        <option *ngFor=\"let product of products$ | async | filterUsedProducts : highlightProduct.value :form.value\"\n                [ngValue]=\"product.id\">\n          {{product.name}}\n        </option>\n      </select>\n      <button [hidden]=\"form?.value?.length === 1\"\n              class=\"btn btn-secondary\"\n              type=\"button\"\n              (click)=\"remove(index)\">Delete</button>\n    </div>\n    <button type=\"button\"\n            class=\"btn btn-secondary\"\n            [disabled]=\"!canAddMore\"\n            (click)=\"add()\">Add more</button>\n  </form>\n</ng-container>\n<ng-template #noProducts>\n  Add some <a [routerLink]=\"['..','products']\">prodcut</a> before\n</ng-template>\n<ng-template #loader>\n  <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-08f56caf429b28e7808626fbb001ca94",
            "file": "src/app/views/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list",
            "styleUrls": [
                "./product-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "businessId$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "products$",
                    "type": "Observable<IProduct[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "insertCatalog",
                    "args": [
                        {
                            "name": "data",
                            "type": "InsertFullCatalog"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "InsertFullCatalog",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "removeProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string"
                        },
                        {
                            "name": "businessId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "businessId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IProduct } from 'src/app/api/catalog';\nimport { CatalogService } from '../../api/catalog.service';\nimport { InsertFullCatalog } from '../../api/utils';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css'],\n})\nexport class ProductListComponent implements OnInit {\n\n  public businessId$: Observable<string>;\n  public products$: Observable<IProduct[]>;\n\n  constructor(private catalogService: CatalogService, private router: ActivatedRoute) { }\n\n  public ngOnInit(): void {\n    this.businessId$ = this.router.params.pipe(map(({ businessId }) => businessId));\n\n    this.products$ = this.businessId$\n      .pipe(switchMap((businessId) => this.catalogService.getProducts(businessId)));\n\n  }\n\n  public insertCatalog(data: InsertFullCatalog) {\n    this.catalogService.insertFullCatalog(data).subscribe();\n  }\n\n  public removeProduct(productId: string, businessId: string) {\n    const areYourSure = confirm('Are you sure');\n    if (areYourSure) {\n      this.catalogService.removeProduct(productId, businessId).subscribe();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService"
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "catalogService",
                        "type": "CatalogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"card-header\">\n    <h4 class=\"card-title\">Products</h4>\n  </div>\n  <div class=\"card-body\">\n    <div class=\"table-responsive\">\n      <table class=\"table\"\n             *ngIf=\"products$ | async as products; else loading\">\n        <tr *ngIf=\"products.length\">\n          <th><a [routerLink]=\"['create']\">+</a></th>\n          <th>Name</th>\n          <th>Category</th>\n          <th>Edit</th>\n          <th>Delete</th>\n        </tr>\n        <tr *ngFor=\"let product of products\">\n          <td colspan=\"2\">{{product.name}}</td>\n          <td>{{product.category.name}}</td>\n          <td><a [routerLink]=\"[product.id, 'edit']\">Edit</a></td>\n          <td><a routerLink=\".\"\n               (click)=\"removeProduct(product.id, product.business_id)\">Delete</a></td>\n        </tr>\n        <tr *ngIf=\"!products.length\">\n          <td>There are any product <a [routerLink]=\"['create']\">create your first one</a></td>\n        </tr>\n        <tr *ngIf=\"!products.length\">\n          <td>\n            <app-upload-excel [businessId]=\"businessId$ | async\"\n                              (fileChange)=\"insertCatalog($event)\"></app-upload-excel>\n          </td>\n        </tr>\n      </table>\n      <ng-template #loading>\n        <app-loader></app-loader>\n      </ng-template>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-183d35f8a5a4b8293b5691b94e65d986",
            "file": "src/app/views/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "profile.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AccountService } from '../../api/account.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: 'profile.component.html',\n  styleUrls: ['profile.component.css'],\n})\nexport class ProfileComponent {\n  public user$: Observable<any>;\n  constructor(private accountService: AccountService) {\n\n    this.user$ = this.accountService.getAccount();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".image img {\n  width: 100%;\n}\n",
                    "styleUrl": "profile.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"row\"\n     *ngIf=\"user$ | async as user;else loading\">\n\n  <div class=\"col-md-6\">\n    <div class=\"card card-user\">\n      <div class=\"image\">\n        <app-brand-image width=\"100%\"\n                         type=\"background\"></app-brand-image>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"author\">\n          <a [routerLink]=\"['..']\">\n            <img class=\"avatar border-gray\"\n                 [src]=\"user.thumbnail\"\n                 alt=\"...\">\n            <h5 class=\"title\">{{user.name}}</h5>\n          </a>\n          <p class=\"description\">\n            {{user.email}}\n          </p>\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <hr>\n        <div class=\"button-container\">\n          <a routerLink=\"edit\">\n            <button class=\"btn btn-primary\">Edit</button></a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #loading>\n  <app-loader></app-loader>\n</ng-template>"
        },
        {
            "name": "SetAddressComponent",
            "id": "component-SetAddressComponent-82044dee2ce6a480a958cdb0a880498a",
            "file": "src/app/components/set-address/set-address.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-set-address",
            "styleUrls": [
                "./set-address.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./set-address.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "addressChange",
                    "defaultValue": "new EventEmitter<IAddress>()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "address",
                    "type": "IAddress",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "addressNumber",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "autocompleteService",
                    "type": "google.maps.places.AutocompleteService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "places",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "placesService",
                    "type": "google.maps.places.PlacesService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchAddress', {read: ElementRef, static: true}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "shouldRequireNumber",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeAddressNumber",
                    "args": [
                        {
                            "name": "evt",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "setPlaceResult",
                    "args": [
                        {
                            "name": "place",
                            "type": "google.maps.places.PlaceResult"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "place",
                            "type": "google.maps.places.PlaceResult",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { MapsAPILoader } from '@agm/core';\nimport { Component, ElementRef, EventEmitter, OnInit, Output, Renderer2, ViewChild } from '@angular/core';\nimport { IAddress } from 'src/app/api/business';\n\n@Component({\n  selector: 'app-set-address',\n  templateUrl: './set-address.component.html',\n  styleUrls: ['./set-address.component.css'],\n})\nexport class SetAddressComponent implements OnInit {\n\n  @Output() public addressChange = new EventEmitter<IAddress>();\n  @ViewChild('searchAddress', { read: ElementRef, static: true }) public searchInput: ElementRef<HTMLInputElement>;\n\n  public shouldRequireNumber = false;\n  public addressNumber = '';\n  public places: any;\n  public autocompleteService: google.maps.places.AutocompleteService;\n  public placesService: google.maps.places.PlacesService;\n  private address: IAddress;\n  constructor(\n    private rendered: Renderer2,\n    private mapsApi: MapsAPILoader) { }\n\n  ngOnInit(): void {\n    this.mapsApi.load().then((d) => {\n      const searchInput = this.searchInput.nativeElement;\n      this.autocompleteService = new google.maps.places.AutocompleteService();\n      this.placesService = new google.maps.places.PlacesService(searchInput);\n      const autocomplete = new google.maps.places.Autocomplete(searchInput);\n      autocomplete.addListener('place_changed', () => {\n        this.shouldRequireNumber = false;\n        const place = autocomplete.getPlace();\n        if (!place?.address_components) {\n          return false;\n        }\n        this.setPlaceResult(place);\n      });\n    });\n\n    // Listen to click events in the component\n    this.rendered.listen(this.searchInput.nativeElement, 'keydown', (event: KeyboardEvent) => {\n      if (event.code === 'Enter') {\n        return false;\n      }\n    });\n  }\n\n  public changeAddressNumber(evt) {\n    this.autocompleteService.getPlacePredictions({\n      input: `${this.address.address} ${evt.target.value}, ${this.address.city || ''} ${this.address.postal_code || ''}`,\n    }, (d) => {\n      const g = new google.maps.places.PlacesService(this.searchInput.nativeElement);\n      g.getDetails({\n        placeId: d[0].place_id,\n      }, (place) => {\n        this.setPlaceResult(place);\n      });\n    });\n\n  }\n  private setPlaceResult(place: google.maps.places.PlaceResult) {\n    const postal_code = place.address_components.find((c) => c.types.some((t) => t === 'postal_code'))?.long_name;\n    const state = place.address_components.find((c) => c.types.some((t) => t === 'administrative_area_level_2'))?.long_name;\n    const city = place.address_components.find((c) => c.types.some((t) => t === 'locality'))?.long_name;\n    const address_types = ['town_square', 'route'];\n    const address = place.address_components.find((c) => c.types.some((t) => address_types.some((at) => at === t)))?.long_name;\n    const address_number = place.address_components.find((c) => c.types.some((t) => t === 'street_number'))?.long_name;\n    this.address = {\n      address: `${address} ${address_number || ''}`,\n      city,\n      postal_code: Number(postal_code),\n      country: 1,\n      state,\n      lat: 0,\n      lng: 0,\n    } as IAddress;\n    if (!address_number) {\n      this.shouldRequireNumber = true;\n      return false;\n    }\n    this.address.lat = place.geometry.location.lat();\n    this.address.lng = place.geometry.location.lng();\n    this.addressChange.emit(this.address);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./set-address.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "rendered",
                        "type": "Renderer2"
                    },
                    {
                        "name": "mapsApi",
                        "type": "MapsAPILoader"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "rendered",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapsApi",
                        "type": "MapsAPILoader",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label>Search Address</label>\n<input class=\"form-control\"\n       #searchAddress />\n<input [hidden]=\"!shouldRequireNumber\"\n       (change)=\"changeAddressNumber($event)\">\n<pre [innerHTML]=\"places?.adr_address\"></pre>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-8cf298e88bd55fd681259fbd2375c777",
            "file": "src/app/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "moduleId": "module.id",
            "outputs": [],
            "providers": [],
            "selector": "sidebar-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuItems",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "filterItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/auth/auth.service';\n\nexport interface IRouteInfo {\n    path: string;\n    title: string;\n    icon: string;\n    class: string;\n    isExact: boolean;\n    needsAdmin?: boolean;\n    notLogged?: boolean;\n}\n\nexport const ROUTES: IRouteInfo[] = [\n    { path: '/', title: 'Dashboard', icon: 'nc-world-2', class: '', isExact: true },\n    { path: '/account', title: 'My Account', icon: 'nc-single-02', class: '', isExact: false },\n    { path: '/account-list', title: 'All accounts', icon: 'nc-laptop', class: '', needsAdmin: true, isExact: false },\n    { path: '/business', title: 'Business', icon: 'nc-shop', class: '', isExact: false },\n    { path: '/login', title: 'Login', icon: 'nc-single-02', class: '', isExact: true, notLogged: true },\n    { path: '/password-reset', title: 'Password reset', icon: 'nc-email-85', class: '', isExact: true, notLogged: true },\n    { path: '/signup', title: 'Signup', icon: 'nc-sun-fog-29', class: '', isExact: true, notLogged: true },\n\n];\n\n@Component({\n    moduleId: module.id,\n    selector: 'sidebar-cmp',\n    templateUrl: 'sidebar.component.html',\n})\n\nexport class SidebarComponent implements OnInit {\n    public menuItems: any[];\n\n    constructor(public authService: AuthService) { }\n\n    public get isAdmin(): boolean {\n        return this.authService.isAdmin;\n    }\n    public get isLoggedIn(): boolean {\n        return this.authService.isLoggedIn;\n    }\n    ngOnInit() {\n        this.authService.user$.subscribe(() => {\n            this.filterItems();\n        });\n\n    }\n\n    private filterItems() {\n        this.menuItems = ROUTES.filter((menuItem) => {\n            if (this.isLoggedIn && !menuItem.notLogged && !menuItem.needsAdmin) {\n                return true;\n            } else if (menuItem.notLogged && !this.isLoggedIn) {\n                return true;\n            } else if (menuItem.needsAdmin) {\n                return this.isAdmin;\n            }\n            return false;\n        });\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isAdmin": {
                    "name": "isAdmin",
                    "getSignature": {
                        "name": "isAdmin",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 36
                    }
                },
                "isLoggedIn": {
                    "name": "isLoggedIn",
                    "getSignature": {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"sidebar-wrapper\">\n  <div class=\"logo\">\n    <a [routerLink]=\"['/']\">\n      <app-brand-image height=\"53px\"\n                       type=\"horizontal-color\"></app-brand-image>\n    </a>\n  </div>\n  <ul class=\"nav\">\n    <li *ngFor=\"let menuItem of menuItems\"\n        routerLinkActive=\"active\"\n        [routerLinkActiveOptions]=\"{exact: menuItem.isExact}\"\n        class=\"{{menuItem.class}}\">\n      <a [routerLink]=\"[menuItem.path]\">\n        <i class=\"nc-icon {{menuItem.icon}}\"></i>\n        <p>{{menuItem.title}}</p>\n      </a>\n    </li>\n  </ul>\n</div>"
        },
        {
            "name": "UploadExcelComponent",
            "id": "component-UploadExcelComponent-dc6ccbe0f69cf7dbae0884e5d5a73a71",
            "file": "src/app/components/upload-excel/upload-excel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upload-excel",
            "styleUrls": [
                "./upload-excel.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./upload-excel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "businessId",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "fileChange",
                    "defaultValue": "new EventEmitter<InsertFullCatalog>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "template",
                    "defaultValue": "environment.files.product_template",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "selectFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "InputEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "InputEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { InsertFullCatalog } from '../../api/utils';\nimport { UtilsService } from '../../api/utils.service';\n\n@Component({\n  selector: 'app-upload-excel',\n  templateUrl: './upload-excel.component.html',\n  styleUrls: ['./upload-excel.component.css'],\n})\nexport class UploadExcelComponent implements OnInit {\n\n  @Input() public businessId: string;\n  @Output() public fileChange = new EventEmitter<InsertFullCatalog>();\n\n  public template = environment.files.product_template;\n\n  constructor(private utilsService: UtilsService) { }\n\n  ngOnInit(): void {\n  }\n\n  public selectFile(event: InputEvent) {\n    const file = (event.target as any).files[0];\n    this.utilsService.convertExcel(file, this.businessId)\n      .pipe(tap((result) => this.fileChange.emit(result)))\n      .subscribe();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./upload-excel.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h4>Instructions</h4>\n<ul>\n    <li>Download file from <a [href]=\"template\">here.</a></li>\n    <li>Create the categories</li>\n    <li>Create the products and link to categories</li>\n    <li>Upload the file in the input below</li>\n    <li>Wait until magic works</li>\n</ul>\n<input class=\"form-control\"\n       type=\"file\"\n       (change)=\"selectFile($event)\" />"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountEditionComponent"
                        },
                        {
                            "name": "AccountIsolationComponent"
                        },
                        {
                            "name": "AccountListComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BusinessComponent"
                        },
                        {
                            "name": "BusinessCreationComponent"
                        },
                        {
                            "name": "BusinessDetailComponent"
                        },
                        {
                            "name": "BusinessEditionComponent"
                        },
                        {
                            "name": "BusinessIsolationComponent"
                        },
                        {
                            "name": "BusinessListComponent"
                        },
                        {
                            "name": "BusinessQrComponent"
                        },
                        {
                            "name": "CatalogCategoriesComponent"
                        },
                        {
                            "name": "CatalogComponent"
                        },
                        {
                            "name": "CatalogProductsComponent"
                        },
                        {
                            "name": "CatalogSummaryComponent"
                        },
                        {
                            "name": "CategoryCreationComponent"
                        },
                        {
                            "name": "CategoryEditionComponent"
                        },
                        {
                            "name": "CategoryListComponent"
                        },
                        {
                            "name": "FilterUsedProductsPipe"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "MainComponent"
                        },
                        {
                            "name": "NotFoundComponent"
                        },
                        {
                            "name": "ProductCreationComponent"
                        },
                        {
                            "name": "ProductEditionComponent"
                        },
                        {
                            "name": "ProductHighlightComponent"
                        },
                        {
                            "name": "ProductListComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "FixedPluginModule"
                        },
                        {
                            "name": "FooterModule"
                        },
                        {
                            "name": "GraphQLModule"
                        },
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "SidebarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthPasswordResetComponent"
                        },
                        {
                            "name": "AuthSigninComponent"
                        },
                        {
                            "name": "AuthSignupComponent"
                        },
                        {
                            "name": "CallbackComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountFormComponent"
                        },
                        {
                            "name": "BrandImageComponent"
                        },
                        {
                            "name": "BusinessFormComponent"
                        },
                        {
                            "name": "CategoryFormComponent"
                        },
                        {
                            "name": "FilterLanguagesPipe"
                        },
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "ProductFormComponent"
                        },
                        {
                            "name": "SetAddressComponent"
                        },
                        {
                            "name": "UploadExcelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountFormComponent"
                        },
                        {
                            "name": "BrandImageComponent"
                        },
                        {
                            "name": "BusinessFormComponent"
                        },
                        {
                            "name": "CategoryFormComponent"
                        },
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "ProductFormComponent"
                        },
                        {
                            "name": "UploadExcelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FixedPluginModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FixedPluginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FixedPluginComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FooterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GraphQLModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavbarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACCOUNT_ID_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants.ts",
                "type": "string",
                "defaultValue": "'account_id'"
            },
            {
                "name": "ANALYTICS_QUERY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/analytics.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery MyQuery($businessId: uuid!, $eventName: String!) {\n  analytics(input: {businessId: $businessId, eventName: $eventName}) {\n    data\n    dates\n    total\n    eventName\n  }\n}\n`"
            },
            {
                "name": "BACKEND_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/backend-url.ts",
                "type": "",
                "defaultValue": "new InjectionToken('BACKEND_URL')"
            },
            {
                "name": "BackendUrlProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/backend-url.ts",
                "type": "FactoryProvider",
                "defaultValue": "{\n  provide: BACKEND_URL,\n  useFactory: () => environment.backendUrl,\n}"
            },
            {
                "name": "BUSINESS_FULL_QUERY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/business.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetFullBusiness {\n  business {\n    id\n    default_lang\n    logotype\n    languages {\n      language\n    }\n    address {\n      address\n      city\n      country\n      id\n      lat\n      lng\n      postal_code\n      state\n    }\n    name\n    slug\n    type\n  }\n}`"
            },
            {
                "name": "BUSINESS_ID_QUERY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/business.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetBusinessById ($id: uuid!) {\n  business_by_pk(id: $id){\n    id\n    default_lang\n    logotype\n    languages {\n      __typename\n      language\n    }\n    address {\n      address\n      city\n      country\n      id\n      lat\n      lng\n      postal_code\n      state\n    }\n    business_meta{\n      id\n      name\n      value\n    }\n    name\n    slug\n    type\n  }\n}`"
            },
            {
                "name": "configureTests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "test-config.helper.ts",
                "type": "",
                "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
            },
            {
                "name": "contactItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/business-form/business-form.component.ts",
                "type": "BusinessMetaEnum[]",
                "defaultValue": "['whatsapp', 'email', 'phone']"
            },
            {
                "name": "defaultLang",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/business-form/business-form.component.ts",
                "type": "string",
                "defaultValue": "'ca_ES'"
            },
            {
                "name": "defaultUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/auth/auth.service.mock.ts",
                "type": "AuthUser",
                "defaultValue": "{\n    email: 'test@tes.com',\n    email_verified: true,\n    name: 'test',\n    nickname: 'test',\n    picture: '',\n    sub: '\"auth0|122334abcdef\"',\n    updated_at: '2020-04-25T08:28:17.576Z',\n}"
            },
            {
                "name": "DELETE_BUSINESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/business.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation EditAddress($id: uuid!) {\n    delete_business_by_pk(id: $id) {\n        id\n    }\n}`"
            },
            {
                "name": "domain",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.dev.ts",
                "type": "string",
                "defaultValue": "'jordi-lopez.eu.auth0.com'"
            },
            {
                "name": "domain",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "string",
                "defaultValue": "'jordi-lopez.eu.auth0.com'"
            },
            {
                "name": "domain",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "string",
                "defaultValue": "'jordi-lopez.eu.auth0.com'"
            },
            {
                "name": "EDIT_BUSINESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/business.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation UpdateBusiness(\n  $id: uuid!,\n  $name: String!,\n  $type: String!,\n  $logotype: String!,\n  $default_lang: language_enum!,\n  $languages: [business_languages_insert_input!]!\n  ) {\n  update_business_by_pk(pk_columns: {id: $id}, _set: {name: $name , logotype: $logotype, type: $type, default_lang: $default_lang}) {\n    id\n  }\n  delete_business_languages(where: {business_id: {_eq: $id}}) {\n    affected_rows\n  }\n  insert_business_languages(objects : $languages){\n    affected_rows\n  }\n\n}`"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  graphQlUrl: 'https://latevacarta.herokuapp.com/v1/graphql',\n  backendUrl: 'https://backend-tlc.herokuapp.com/',\n  googleMapsApi: 'AIzaSyBFWvZ2Aoes_dRFk36ZQz65ip0TDutUTk4',\n  files: {\n    product_template: 'https://latevacarta.s3.eu-central-1.amazonaws.com/assets/products.xlsx',\n  },\n  appName: jsonPackage.name,\n  version: 'dev.' + jsonPackage.version,\n  auth: {\n    clientID: 'tLAe1ajZKEFJmy5UhtTS8EuCiXQSEfwp',\n    domain,\n    redirectUri: 'http://localhost:4200/callback',\n    returnTo: 'http://localhost:4200',\n    scope: 'openid profile email',\n    audience: `https://${domain}/userinfo`,\n    responseType: 'token id_token',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  appName: 'La teva carta ',\n  graphQlUrl: 'https://prod-latevacarta-database.herokuapp.com/v1/graphql',\n  backendUrl: 'https://prod-backend-ltc.herokuapp.com/',\n  googleMapsApi: 'AIzaSyBFWvZ2Aoes_dRFk36ZQz65ip0TDutUTk4',\n  files: {\n    product_template: 'https://latevacarta.s3.eu-central-1.amazonaws.com/assets/products.xlsx',\n  },\n  version: jsonPackage.version,\n  auth: {\n    clientID: 'WhSzGqyXoczFWt1GOXaTbV7kevavhfIh',\n    domain,\n    redirectUri: 'https://admin.latevacarta.click/callback',\n    returnTo: 'https://admin.latevacarta.click',\n    scope: 'openid profile email',\n    audience: `https://${domain}/userinfo`,\n    responseType: 'token id_token',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.dev.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  appName: 'La teva carta ',\n  graphQlUrl: 'https://latevacarta.herokuapp.com/v1/graphql',\n  backendUrl: 'https://backend-tlc.herokuapp.com/',\n  googleMapsApi: 'AIzaSyBFWvZ2Aoes_dRFk36ZQz65ip0TDutUTk4',\n  files: {\n    product_template: 'https://latevacarta.s3.eu-central-1.amazonaws.com/assets/products.xlsx',\n  },\n  version: jsonPackage.version,\n  auth: {\n    clientID: 'tLAe1ajZKEFJmy5UhtTS8EuCiXQSEfwp',\n    domain,\n    redirectUri: 'https://dev-admin.latevacarta.click/callback',\n    returnTo: 'https://dev-admin.latevacarta.click',\n    scope: 'openid profile email',\n    audience: `https://${domain}/userinfo`,\n    responseType: 'token id_token',\n  },\n}"
            },
            {
                "name": "EXPIRES_AT_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/auth/auth.service.ts",
                "type": "string",
                "defaultValue": "'expiresAt'"
            },
            {
                "name": "fonts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/business-form/business-form.component.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    group: 'Sans Serif',\n    fonts: [\n      'Arial, Helvetica, sans-serif',\n      '\"Arial Black\", Gadget, sans-serif',\n      '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      'Tahoma, Geneva, sans-serif',\n      '\"Trebuchet MS\", Helvetica, sans-serif',\n      'Verdana, Geneva, sans-serif',\n    ],\n  }, {\n    group: 'Serif',\n    fonts: [\n      '\"Times New Roman\", Times, serif',\n      'Georgia, serif',\n      '\"Palatino Linotype\", \"Book Antiqua\", Palatino, serif',\n    ],\n  }, {\n    group: 'Monospace',\n    fonts: [\n      'Courier New',\n      'Lucida Console',\n    ],\n  },\n]"
            },
            {
                "name": "GET_ACCOUNT_QUERY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/account.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetAccount($userId: String!) {\n  account(where: {auth0_id: {_eq: $userId}}){\n    birthday\n    creation\n    email\n    id\n    lastname\n    last_seen\n    thumbnail\n    username\n    name\n  }\n}\n`"
            },
            {
                "name": "GET_ACCOUNTS_QUERY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/account.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetAccounts {\n  account{\n    birthday\n    creation\n    email\n    id\n    lastname\n    last_seen\n    thumbnail\n    username\n    name\n  }\n}\n`"
            },
            {
                "name": "GET_ALL_CATEGORIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetAllCategories($businessId: uuid!) {\n  category(where: {business_id: { _eq : $businessId}}, order_by: {order: asc}){\n    id\n    name\n    parent_category\n    business_id\n    order\n    name_languages{\n      language\n      value\n    }\n  }\n}`"
            },
            {
                "name": "GET_ALL_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetProducts($businessId : uuid!) {\n  product(where: {category: {business_id: {_eq: $businessId}}}) {\n    category {\n      id\n      name\n    }\n    business_id\n    description\n    feature_image\n    id\n    name\n    price\n    name_languages{\n      language\n      value\n    }\n    description_languages{\n      language\n      value\n    }\n  }\n}`"
            },
            {
                "name": "GET_CATALOG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetCatalogByBusiness($businessId: uuid!) {\n    category(where: {parent_category : {_is_null:true},business_id: { _eq : $businessId}}){\n      ...categoryModel\n      categories{\n         ...subCategories\n      }\n    }\n  }\n  fragment categoryModel on category {\n    id\n    name\n    name_languages{\n      language\n      value\n    }\n    products {\n        id\n        name\n        description\n        price\n    }\n  }\n\n  fragment subCategories on category{\n    id\n    name\n    products {\n      id\n      name\n      description\n      price\n    }\n    name_languages{\n      language\n      value\n    }\n    categories{\n      ...categoryModel\n    }\n  }\n`"
            },
            {
                "name": "GET_CATEGORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetCategory($categoryId:uuid!) {\n  category_by_pk(id: $categoryId){\n    id\n    name\n    parent_category\n    business_id\n    order\n    name_languages{\n      language\n      value\n    }\n  }\n}`"
            },
            {
                "name": "GET_LANGUAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/medatata.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetLanguages {\n  language {\n    code\n    name\n  }\n}`"
            },
            {
                "name": "GET_PRODUCT_BY_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetProductById($id:uuid!) {\n  product_by_pk(id: $id){\n    category {\n      id\n      name\n    }\n    business_id\n    category_id\n    description\n    feature_image\n    id\n    name\n    price\n    name_languages{\n      language\n      value\n    }\n    description_languages{\n      language\n      value\n    }\n  }\n}`"
            },
            {
                "name": "GET_PRODUCTS_HIGHLIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nquery GetProductsHighlighted($businessId: uuid = \"\") {\n  product_highlight(where: {business_id: {_eq: $businessId}}){\n    product_id\n    product{\n      name\n      id\n    }\n  }\n}`"
            },
            {
                "name": "INSERT_BUSINESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/business.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation InsertBusiness($business : business_insert_input!) {\n  insert_business_one(\n    object: $business) {\n    id\n    address {\n      id\n    }\n  }\n}`"
            },
            {
                "name": "INSERT_CATEGORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation InsertCategory($category : category_insert_input!) {\n  insert_category_one(object: $category){\n     id\n  }\n}`"
            },
            {
                "name": "INSERT_FULL_CATEGORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation UpdateCategories($categories: [category_insert_input!]!) {\n  insert_category(objects: $categories){\n    affected_rows\n    returning{\n      id\n    }\n  }\n}\n`"
            },
            {
                "name": "INSERT_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation InsertProduct($product: product_insert_input!) {\n    insert_product_one(object: $product){\n        id\n    }\n}`"
            },
            {
                "name": "INSERT_PRODUCTS_HIGHLIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation UpdateHighlightedProducts($businessId: uuid = \"\" , $productsHighlighted: [product_highlight_insert_input!]!) {\n  delete_product_highlight(where: {business_id: {_eq: $businessId}}) {\n    affected_rows\n  }\n  insert_product_highlight(objects: $productsHighlighted){\n    affected_rows\n  }\n}\n\n`"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MAX_HIGHLIGHTED_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/product-highlight/product-highlight.component.ts",
                "type": "number",
                "defaultValue": "4"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setup-jest.ts",
                "type": "",
                "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
            },
            {
                "name": "optionsItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/business-form/business-form.component.ts",
                "type": "BusinessMetaEnum[]",
                "defaultValue": "['font']"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pswStrength",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/auth/auth.signup.component.ts",
                "type": "",
                "defaultValue": "/^(?:([A-Z])*([a-z])*(\\d)*(\\W)*){8,12}$/"
            },
            {
                "name": "REMOVE_CATEGORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation RemoveCategory($id: uuid!) {\n  delete_category_by_pk(id: $id){\n    id\n  }\n}`"
            },
            {
                "name": "REMOVE_METADATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/business.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation MyMutation($businessId: uuid, $metadata: [business_meta_insert_input!]!) {\n  delete_business_meta(where: {business_id: {_eq: $businessId}}) {\n    affected_rows\n  }\n  insert_business_meta(objects: $metadata){\n    affected_rows\n  }\n}`"
            },
            {
                "name": "REMOVE_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation RemoveProduct($id: uuid!) {\n    delete_product_by_pk(id: $id){\n        id\n    }\n}`"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sidebar/sidebar.component.ts",
                "type": "IRouteInfo[]",
                "defaultValue": "[\n    { path: '/', title: 'Dashboard', icon: 'nc-world-2', class: '', isExact: true },\n    { path: '/account', title: 'My Account', icon: 'nc-single-02', class: '', isExact: false },\n    { path: '/account-list', title: 'All accounts', icon: 'nc-laptop', class: '', needsAdmin: true, isExact: false },\n    { path: '/business', title: 'Business', icon: 'nc-shop', class: '', isExact: false },\n    { path: '/login', title: 'Login', icon: 'nc-single-02', class: '', isExact: true, notLogged: true },\n    { path: '/password-reset', title: 'Password reset', icon: 'nc-email-85', class: '', isExact: true, notLogged: true },\n    { path: '/signup', title: 'Signup', icon: 'nc-sun-fog-29', class: '', isExact: true, notLogged: true },\n\n]"
            },
            {
                "name": "routingConfiguration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-routing.module.ts",
                "type": "ExtraOptions",
                "defaultValue": "{\n  paramsInheritanceStrategy: 'always',\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "socialItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/business-form/business-form.component.ts",
                "type": "BusinessMetaEnum[]",
                "defaultValue": "['facebook', 'instagram', 'tiktok', 'web', 'youtube']"
            },
            {
                "name": "SORT_CATEGORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation SortCategories ($categories: [category_insert_input!]!){\n  insert_category(objects: $categories , on_conflict:{\n    constraint: category_pkey,\n    update_columns: [order]\n  }){\n    affected_rows\n  }\n}`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "TOKEN_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/auth/auth.service.ts",
                "type": "string",
                "defaultValue": "'token'"
            },
            {
                "name": "TOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/auth/auth.service.ts",
                "type": "string",
                "defaultValue": "'accessToken'"
            },
            {
                "name": "tokenSubject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/auth/auth.service.mock.ts",
                "type": "",
                "defaultValue": "new Subject<string>()"
            },
            {
                "name": "UPDATE_ACCOUNT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/account.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation UpdateAccount(\n  $id: uuid!,\n  $lastname: String!,\n  $name: String!) {\n  update_account_by_pk(pk_columns: {id: $id}, _set: {lastname: $lastname, name: $name}){\n    id\n  }\n}`"
            },
            {
                "name": "UPDATE_ADDRESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/address.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation EditAddress(\n    $id: uuid!,\n    $address: String,\n    $postal_code: Int,\n    $state: String,\n    $city: String,\n    $country: Int,\n    $lat: numeric,\n    $lng: numeric) {\n  update_address_by_pk(\n      pk_columns: {id: $id},\n      _set: {address: $address, city: $city, country: $country, lat: $lat, lng: $lng, postal_code: $postal_code, state: $state}) {\n    id\n  }\n}`"
            },
            {
                "name": "UPDATE_CATEGORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation UPDATE_CATEGORY($id: uuid!,$name: String!,$parent_category: uuid, $languages: [category_name_langs_insert_input!]!) {\n  update_category_by_pk(pk_columns: {id: $id},_set: {name: $name,parent_category: $parent_category}) {\n    id\n    name\n  }\n  delete_category_name_langs(where: {category_id: {_eq: $id}}){\n    affected_rows\n  }\n  insert_category_name_langs(objects: $languages){\n    affected_rows\n  }\n}`"
            },
            {
                "name": "UPDATE_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/catalog.queries.ts",
                "type": "",
                "defaultValue": "gql`\nmutation UpdateProduct(\n    $id: uuid!,\n    $price: numeric,\n    $name: String!,\n    $description: String,\n    $feature_image: String,\n    $category_id: uuid!,\n    $is_active: Boolean,\n    $name_languages: [product_name_langs_insert_input!]!,\n    $description_languages: [product_description_langs_insert_input!]!,\n) {\n    update_product_by_pk(pk_columns: {id: $id},\n    _set: {\n        category_id: $category_id,\n        description: $description,\n        is_active: $is_active,\n        name: $name,\n        feature_image: $feature_image,\n        price: $price}) {\n      name\n      price\n    }\n    delete_product_name_langs(where: {product_id: {_eq: $id}}){\n      affected_rows\n    }\n    insert_product_name_langs(objects: $name_languages){\n      affected_rows\n    }\n    delete_product_description_langs(where: {product_id: {_eq: $id}}){\n      affected_rows\n    }\n    insert_product_description_langs(objects: $description_languages){\n      affected_rows\n    }\n}`"
            },
            {
                "name": "uri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.module.ts",
                "type": "",
                "defaultValue": "environment.graphQlUrl"
            },
            {
                "name": "USER_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/auth/auth.service.ts",
                "type": "string",
                "defaultValue": "'user_id'"
            },
            {
                "name": "userSubject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/auth/auth.service.mock.ts",
                "type": "",
                "defaultValue": "new Subject<AuthUser>()"
            }
        ],
        "functions": [
            {
                "name": "generateAutoConfigFactory",
                "ctype": "miscellaneous",
                "subtype": "function",
                "file": "src/auth/auth.module.ts",
                "description": "",
                "args": [
                    {
                        "name": "config"
                    }
                ],
                "returnType": "Function",
                "jsdoctags": [
                    {
                        "name": "config",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapAnalytics",
                "file": "src/app/views/business-detail/business-detail.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "name": "totalDays",
                        "type": ""
                    }
                ],
                "returnType": "IAnalyticsChartData",
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalDays",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideApollo",
                "file": "src/app/graphql.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "httpLink"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpLink",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "samePassword",
                "file": "src/auth/validators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "originalControlName"
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "originalControlName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BrandType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sqare-color\" | \"background\" | \"full-color\" | \"full-plain\" | \"horizontal-color\" | \"horizontal-negative\" | \"imago-color\" | \"imago-plain\"",
                "file": "src/app/components/brand-image/brand-image.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "CompilerOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "test-config.helper.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "ConfigureFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "test-config.helper.ts",
                "description": "",
                "kind": 162
            }
        ],
        "enumerations": [
            {
                "name": "AuthRoutes",
                "childs": [
                    {
                        "name": "CALLBACK",
                        "value": "callback"
                    },
                    {
                        "name": "SIGNIN",
                        "value": "login"
                    },
                    {
                        "name": "PASSWORD_RESET",
                        "value": "password-reset"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "signup"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/auth/auth.routes.ts"
            }
        ],
        "groupedVariables": {
            "src/app/constants.ts": [
                {
                    "name": "ACCOUNT_ID_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants.ts",
                    "type": "string",
                    "defaultValue": "'account_id'"
                }
            ],
            "src/app/api/analytics.queries.ts": [
                {
                    "name": "ANALYTICS_QUERY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/analytics.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery MyQuery($businessId: uuid!, $eventName: String!) {\n  analytics(input: {businessId: $businessId, eventName: $eventName}) {\n    data\n    dates\n    total\n    eventName\n  }\n}\n`"
                }
            ],
            "src/app/backend-url.ts": [
                {
                    "name": "BACKEND_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/backend-url.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('BACKEND_URL')"
                },
                {
                    "name": "BackendUrlProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/backend-url.ts",
                    "type": "FactoryProvider",
                    "defaultValue": "{\n  provide: BACKEND_URL,\n  useFactory: () => environment.backendUrl,\n}"
                }
            ],
            "src/app/api/business.queries.ts": [
                {
                    "name": "BUSINESS_FULL_QUERY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/business.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetFullBusiness {\n  business {\n    id\n    default_lang\n    logotype\n    languages {\n      language\n    }\n    address {\n      address\n      city\n      country\n      id\n      lat\n      lng\n      postal_code\n      state\n    }\n    name\n    slug\n    type\n  }\n}`"
                },
                {
                    "name": "BUSINESS_ID_QUERY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/business.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetBusinessById ($id: uuid!) {\n  business_by_pk(id: $id){\n    id\n    default_lang\n    logotype\n    languages {\n      __typename\n      language\n    }\n    address {\n      address\n      city\n      country\n      id\n      lat\n      lng\n      postal_code\n      state\n    }\n    business_meta{\n      id\n      name\n      value\n    }\n    name\n    slug\n    type\n  }\n}`"
                },
                {
                    "name": "DELETE_BUSINESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/business.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation EditAddress($id: uuid!) {\n    delete_business_by_pk(id: $id) {\n        id\n    }\n}`"
                },
                {
                    "name": "EDIT_BUSINESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/business.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation UpdateBusiness(\n  $id: uuid!,\n  $name: String!,\n  $type: String!,\n  $logotype: String!,\n  $default_lang: language_enum!,\n  $languages: [business_languages_insert_input!]!\n  ) {\n  update_business_by_pk(pk_columns: {id: $id}, _set: {name: $name , logotype: $logotype, type: $type, default_lang: $default_lang}) {\n    id\n  }\n  delete_business_languages(where: {business_id: {_eq: $id}}) {\n    affected_rows\n  }\n  insert_business_languages(objects : $languages){\n    affected_rows\n  }\n\n}`"
                },
                {
                    "name": "INSERT_BUSINESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/business.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation InsertBusiness($business : business_insert_input!) {\n  insert_business_one(\n    object: $business) {\n    id\n    address {\n      id\n    }\n  }\n}`"
                },
                {
                    "name": "REMOVE_METADATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/business.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation MyMutation($businessId: uuid, $metadata: [business_meta_insert_input!]!) {\n  delete_business_meta(where: {business_id: {_eq: $businessId}}) {\n    affected_rows\n  }\n  insert_business_meta(objects: $metadata){\n    affected_rows\n  }\n}`"
                }
            ],
            "test-config.helper.ts": [
                {
                    "name": "configureTests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "test-config.helper.ts",
                    "type": "",
                    "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
                }
            ],
            "src/app/components/business-form/business-form.component.ts": [
                {
                    "name": "contactItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/business-form/business-form.component.ts",
                    "type": "BusinessMetaEnum[]",
                    "defaultValue": "['whatsapp', 'email', 'phone']"
                },
                {
                    "name": "defaultLang",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/business-form/business-form.component.ts",
                    "type": "string",
                    "defaultValue": "'ca_ES'"
                },
                {
                    "name": "fonts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/business-form/business-form.component.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    group: 'Sans Serif',\n    fonts: [\n      'Arial, Helvetica, sans-serif',\n      '\"Arial Black\", Gadget, sans-serif',\n      '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n      'Tahoma, Geneva, sans-serif',\n      '\"Trebuchet MS\", Helvetica, sans-serif',\n      'Verdana, Geneva, sans-serif',\n    ],\n  }, {\n    group: 'Serif',\n    fonts: [\n      '\"Times New Roman\", Times, serif',\n      'Georgia, serif',\n      '\"Palatino Linotype\", \"Book Antiqua\", Palatino, serif',\n    ],\n  }, {\n    group: 'Monospace',\n    fonts: [\n      'Courier New',\n      'Lucida Console',\n    ],\n  },\n]"
                },
                {
                    "name": "optionsItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/business-form/business-form.component.ts",
                    "type": "BusinessMetaEnum[]",
                    "defaultValue": "['font']"
                },
                {
                    "name": "socialItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/business-form/business-form.component.ts",
                    "type": "BusinessMetaEnum[]",
                    "defaultValue": "['facebook', 'instagram', 'tiktok', 'web', 'youtube']"
                }
            ],
            "src/auth/auth.service.mock.ts": [
                {
                    "name": "defaultUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/auth/auth.service.mock.ts",
                    "type": "AuthUser",
                    "defaultValue": "{\n    email: 'test@tes.com',\n    email_verified: true,\n    name: 'test',\n    nickname: 'test',\n    picture: '',\n    sub: '\"auth0|122334abcdef\"',\n    updated_at: '2020-04-25T08:28:17.576Z',\n}"
                },
                {
                    "name": "tokenSubject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/auth/auth.service.mock.ts",
                    "type": "",
                    "defaultValue": "new Subject<string>()"
                },
                {
                    "name": "userSubject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/auth/auth.service.mock.ts",
                    "type": "",
                    "defaultValue": "new Subject<AuthUser>()"
                }
            ],
            "src/environments/environment.dev.ts": [
                {
                    "name": "domain",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.dev.ts",
                    "type": "string",
                    "defaultValue": "'jordi-lopez.eu.auth0.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.dev.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  appName: 'La teva carta ',\n  graphQlUrl: 'https://latevacarta.herokuapp.com/v1/graphql',\n  backendUrl: 'https://backend-tlc.herokuapp.com/',\n  googleMapsApi: 'AIzaSyBFWvZ2Aoes_dRFk36ZQz65ip0TDutUTk4',\n  files: {\n    product_template: 'https://latevacarta.s3.eu-central-1.amazonaws.com/assets/products.xlsx',\n  },\n  version: jsonPackage.version,\n  auth: {\n    clientID: 'tLAe1ajZKEFJmy5UhtTS8EuCiXQSEfwp',\n    domain,\n    redirectUri: 'https://dev-admin.latevacarta.click/callback',\n    returnTo: 'https://dev-admin.latevacarta.click',\n    scope: 'openid profile email',\n    audience: `https://${domain}/userinfo`,\n    responseType: 'token id_token',\n  },\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "domain",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "string",
                    "defaultValue": "'jordi-lopez.eu.auth0.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  appName: 'La teva carta ',\n  graphQlUrl: 'https://prod-latevacarta-database.herokuapp.com/v1/graphql',\n  backendUrl: 'https://prod-backend-ltc.herokuapp.com/',\n  googleMapsApi: 'AIzaSyBFWvZ2Aoes_dRFk36ZQz65ip0TDutUTk4',\n  files: {\n    product_template: 'https://latevacarta.s3.eu-central-1.amazonaws.com/assets/products.xlsx',\n  },\n  version: jsonPackage.version,\n  auth: {\n    clientID: 'WhSzGqyXoczFWt1GOXaTbV7kevavhfIh',\n    domain,\n    redirectUri: 'https://admin.latevacarta.click/callback',\n    returnTo: 'https://admin.latevacarta.click',\n    scope: 'openid profile email',\n    audience: `https://${domain}/userinfo`,\n    responseType: 'token id_token',\n  },\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "domain",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "string",
                    "defaultValue": "'jordi-lopez.eu.auth0.com'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  graphQlUrl: 'https://latevacarta.herokuapp.com/v1/graphql',\n  backendUrl: 'https://backend-tlc.herokuapp.com/',\n  googleMapsApi: 'AIzaSyBFWvZ2Aoes_dRFk36ZQz65ip0TDutUTk4',\n  files: {\n    product_template: 'https://latevacarta.s3.eu-central-1.amazonaws.com/assets/products.xlsx',\n  },\n  appName: jsonPackage.name,\n  version: 'dev.' + jsonPackage.version,\n  auth: {\n    clientID: 'tLAe1ajZKEFJmy5UhtTS8EuCiXQSEfwp',\n    domain,\n    redirectUri: 'http://localhost:4200/callback',\n    returnTo: 'http://localhost:4200',\n    scope: 'openid profile email',\n    audience: `https://${domain}/userinfo`,\n    responseType: 'token id_token',\n  },\n}"
                }
            ],
            "src/auth/auth.service.ts": [
                {
                    "name": "EXPIRES_AT_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/auth/auth.service.ts",
                    "type": "string",
                    "defaultValue": "'expiresAt'"
                },
                {
                    "name": "TOKEN_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/auth/auth.service.ts",
                    "type": "string",
                    "defaultValue": "'token'"
                },
                {
                    "name": "TOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/auth/auth.service.ts",
                    "type": "string",
                    "defaultValue": "'accessToken'"
                },
                {
                    "name": "USER_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/auth/auth.service.ts",
                    "type": "string",
                    "defaultValue": "'user_id'"
                }
            ],
            "src/app/api/account.queries.ts": [
                {
                    "name": "GET_ACCOUNT_QUERY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/account.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetAccount($userId: String!) {\n  account(where: {auth0_id: {_eq: $userId}}){\n    birthday\n    creation\n    email\n    id\n    lastname\n    last_seen\n    thumbnail\n    username\n    name\n  }\n}\n`"
                },
                {
                    "name": "GET_ACCOUNTS_QUERY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/account.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetAccounts {\n  account{\n    birthday\n    creation\n    email\n    id\n    lastname\n    last_seen\n    thumbnail\n    username\n    name\n  }\n}\n`"
                },
                {
                    "name": "UPDATE_ACCOUNT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/account.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation UpdateAccount(\n  $id: uuid!,\n  $lastname: String!,\n  $name: String!) {\n  update_account_by_pk(pk_columns: {id: $id}, _set: {lastname: $lastname, name: $name}){\n    id\n  }\n}`"
                }
            ],
            "src/app/api/catalog.queries.ts": [
                {
                    "name": "GET_ALL_CATEGORIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetAllCategories($businessId: uuid!) {\n  category(where: {business_id: { _eq : $businessId}}, order_by: {order: asc}){\n    id\n    name\n    parent_category\n    business_id\n    order\n    name_languages{\n      language\n      value\n    }\n  }\n}`"
                },
                {
                    "name": "GET_ALL_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetProducts($businessId : uuid!) {\n  product(where: {category: {business_id: {_eq: $businessId}}}) {\n    category {\n      id\n      name\n    }\n    business_id\n    description\n    feature_image\n    id\n    name\n    price\n    name_languages{\n      language\n      value\n    }\n    description_languages{\n      language\n      value\n    }\n  }\n}`"
                },
                {
                    "name": "GET_CATALOG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetCatalogByBusiness($businessId: uuid!) {\n    category(where: {parent_category : {_is_null:true},business_id: { _eq : $businessId}}){\n      ...categoryModel\n      categories{\n         ...subCategories\n      }\n    }\n  }\n  fragment categoryModel on category {\n    id\n    name\n    name_languages{\n      language\n      value\n    }\n    products {\n        id\n        name\n        description\n        price\n    }\n  }\n\n  fragment subCategories on category{\n    id\n    name\n    products {\n      id\n      name\n      description\n      price\n    }\n    name_languages{\n      language\n      value\n    }\n    categories{\n      ...categoryModel\n    }\n  }\n`"
                },
                {
                    "name": "GET_CATEGORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetCategory($categoryId:uuid!) {\n  category_by_pk(id: $categoryId){\n    id\n    name\n    parent_category\n    business_id\n    order\n    name_languages{\n      language\n      value\n    }\n  }\n}`"
                },
                {
                    "name": "GET_PRODUCT_BY_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetProductById($id:uuid!) {\n  product_by_pk(id: $id){\n    category {\n      id\n      name\n    }\n    business_id\n    category_id\n    description\n    feature_image\n    id\n    name\n    price\n    name_languages{\n      language\n      value\n    }\n    description_languages{\n      language\n      value\n    }\n  }\n}`"
                },
                {
                    "name": "GET_PRODUCTS_HIGHLIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetProductsHighlighted($businessId: uuid = \"\") {\n  product_highlight(where: {business_id: {_eq: $businessId}}){\n    product_id\n    product{\n      name\n      id\n    }\n  }\n}`"
                },
                {
                    "name": "INSERT_CATEGORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation InsertCategory($category : category_insert_input!) {\n  insert_category_one(object: $category){\n     id\n  }\n}`"
                },
                {
                    "name": "INSERT_FULL_CATEGORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation UpdateCategories($categories: [category_insert_input!]!) {\n  insert_category(objects: $categories){\n    affected_rows\n    returning{\n      id\n    }\n  }\n}\n`"
                },
                {
                    "name": "INSERT_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation InsertProduct($product: product_insert_input!) {\n    insert_product_one(object: $product){\n        id\n    }\n}`"
                },
                {
                    "name": "INSERT_PRODUCTS_HIGHLIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation UpdateHighlightedProducts($businessId: uuid = \"\" , $productsHighlighted: [product_highlight_insert_input!]!) {\n  delete_product_highlight(where: {business_id: {_eq: $businessId}}) {\n    affected_rows\n  }\n  insert_product_highlight(objects: $productsHighlighted){\n    affected_rows\n  }\n}\n\n`"
                },
                {
                    "name": "REMOVE_CATEGORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation RemoveCategory($id: uuid!) {\n  delete_category_by_pk(id: $id){\n    id\n  }\n}`"
                },
                {
                    "name": "REMOVE_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation RemoveProduct($id: uuid!) {\n    delete_product_by_pk(id: $id){\n        id\n    }\n}`"
                },
                {
                    "name": "SORT_CATEGORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation SortCategories ($categories: [category_insert_input!]!){\n  insert_category(objects: $categories , on_conflict:{\n    constraint: category_pkey,\n    update_columns: [order]\n  }){\n    affected_rows\n  }\n}`"
                },
                {
                    "name": "UPDATE_CATEGORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation UPDATE_CATEGORY($id: uuid!,$name: String!,$parent_category: uuid, $languages: [category_name_langs_insert_input!]!) {\n  update_category_by_pk(pk_columns: {id: $id},_set: {name: $name,parent_category: $parent_category}) {\n    id\n    name\n  }\n  delete_category_name_langs(where: {category_id: {_eq: $id}}){\n    affected_rows\n  }\n  insert_category_name_langs(objects: $languages){\n    affected_rows\n  }\n}`"
                },
                {
                    "name": "UPDATE_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/catalog.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation UpdateProduct(\n    $id: uuid!,\n    $price: numeric,\n    $name: String!,\n    $description: String,\n    $feature_image: String,\n    $category_id: uuid!,\n    $is_active: Boolean,\n    $name_languages: [product_name_langs_insert_input!]!,\n    $description_languages: [product_description_langs_insert_input!]!,\n) {\n    update_product_by_pk(pk_columns: {id: $id},\n    _set: {\n        category_id: $category_id,\n        description: $description,\n        is_active: $is_active,\n        name: $name,\n        feature_image: $feature_image,\n        price: $price}) {\n      name\n      price\n    }\n    delete_product_name_langs(where: {product_id: {_eq: $id}}){\n      affected_rows\n    }\n    insert_product_name_langs(objects: $name_languages){\n      affected_rows\n    }\n    delete_product_description_langs(where: {product_id: {_eq: $id}}){\n      affected_rows\n    }\n    insert_product_description_langs(objects: $description_languages){\n      affected_rows\n    }\n}`"
                }
            ],
            "src/app/api/medatata.queries.ts": [
                {
                    "name": "GET_LANGUAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/medatata.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nquery GetLanguages {\n  language {\n    code\n    name\n  }\n}`"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/app/views/product-highlight/product-highlight.component.ts": [
                {
                    "name": "MAX_HIGHLIGHTED_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/product-highlight/product-highlight.component.ts",
                    "type": "number",
                    "defaultValue": "4"
                }
            ],
            "setup-jest.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setup-jest.ts",
                    "type": "",
                    "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
                }
            ],
            "src/auth/auth.signup.component.ts": [
                {
                    "name": "pswStrength",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/auth/auth.signup.component.ts",
                    "type": "",
                    "defaultValue": "/^(?:([A-Z])*([a-z])*(\\d)*(\\W)*){8,12}$/"
                }
            ],
            "src/app/sidebar/sidebar.component.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sidebar/sidebar.component.ts",
                    "type": "IRouteInfo[]",
                    "defaultValue": "[\n    { path: '/', title: 'Dashboard', icon: 'nc-world-2', class: '', isExact: true },\n    { path: '/account', title: 'My Account', icon: 'nc-single-02', class: '', isExact: false },\n    { path: '/account-list', title: 'All accounts', icon: 'nc-laptop', class: '', needsAdmin: true, isExact: false },\n    { path: '/business', title: 'Business', icon: 'nc-shop', class: '', isExact: false },\n    { path: '/login', title: 'Login', icon: 'nc-single-02', class: '', isExact: true, notLogged: true },\n    { path: '/password-reset', title: 'Password reset', icon: 'nc-email-85', class: '', isExact: true, notLogged: true },\n    { path: '/signup', title: 'Signup', icon: 'nc-sun-fog-29', class: '', isExact: true, notLogged: true },\n\n]"
                }
            ],
            "src/app/app-routing.module.ts": [
                {
                    "name": "routingConfiguration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-routing.module.ts",
                    "type": "ExtraOptions",
                    "defaultValue": "{\n  paramsInheritanceStrategy: 'always',\n}"
                }
            ],
            "src/app/api/address.queries.ts": [
                {
                    "name": "UPDATE_ADDRESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/address.queries.ts",
                    "type": "",
                    "defaultValue": "gql`\nmutation EditAddress(\n    $id: uuid!,\n    $address: String,\n    $postal_code: Int,\n    $state: String,\n    $city: String,\n    $country: Int,\n    $lat: numeric,\n    $lng: numeric) {\n  update_address_by_pk(\n      pk_columns: {id: $id},\n      _set: {address: $address, city: $city, country: $country, lat: $lat, lng: $lng, postal_code: $postal_code, state: $state}) {\n    id\n  }\n}`"
                }
            ],
            "src/app/graphql.module.ts": [
                {
                    "name": "uri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.module.ts",
                    "type": "",
                    "defaultValue": "environment.graphQlUrl"
                }
            ]
        },
        "groupedFunctions": {
            "src/auth/auth.module.ts": [
                {
                    "name": "generateAutoConfigFactory",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "file": "src/auth/auth.module.ts",
                    "description": "",
                    "args": [
                        {
                            "name": "config"
                        }
                    ],
                    "returnType": "Function",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/views/business-detail/business-detail.component.ts": [
                {
                    "name": "mapAnalytics",
                    "file": "src/app/views/business-detail/business-detail.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        },
                        {
                            "name": "totalDays",
                            "type": ""
                        }
                    ],
                    "returnType": "IAnalyticsChartData",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalDays",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/graphql.module.ts": [
                {
                    "name": "provideApollo",
                    "file": "src/app/graphql.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "httpLink"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpLink",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/auth/validators.ts": [
                {
                    "name": "samePassword",
                    "file": "src/auth/validators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "originalControlName"
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "originalControlName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/auth/auth.routes.ts": [
                {
                    "name": "AuthRoutes",
                    "childs": [
                        {
                            "name": "CALLBACK",
                            "value": "callback"
                        },
                        {
                            "name": "SIGNIN",
                            "value": "login"
                        },
                        {
                            "name": "PASSWORD_RESET",
                            "value": "password-reset"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "signup"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/auth/auth.routes.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/components/brand-image/brand-image.component.ts": [
                {
                    "name": "BrandType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sqare-color\" | \"background\" | \"full-color\" | \"full-plain\" | \"horizontal-color\" | \"horizontal-negative\" | \"imago-color\" | \"imago-plain\"",
                    "file": "src/app/components/brand-image/brand-image.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "test-config.helper.ts": [
                {
                    "name": "CompilerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "test-config.helper.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "ConfigureFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "test-config.helper.ts",
                    "description": "",
                    "kind": 162
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "MainComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "business",
                        "component": "BusinessComponent",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "path": "",
                                "component": "BusinessListComponent"
                            },
                            {
                                "path": "create",
                                "component": "BusinessCreationComponent"
                            },
                            {
                                "path": ":businessId",
                                "component": "BusinessIsolationComponent",
                                "children": [
                                    {
                                        "path": "",
                                        "component": "BusinessDetailComponent",
                                        "pathMatch": "full"
                                    },
                                    {
                                        "path": "qr",
                                        "component": "BusinessQrComponent"
                                    },
                                    {
                                        "path": "edit",
                                        "component": "BusinessEditionComponent"
                                    },
                                    {
                                        "path": "catalog",
                                        "component": "CatalogComponent",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CatalogSummaryComponent"
                                            },
                                            {
                                                "path": "categories",
                                                "component": "CatalogCategoriesComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "CategoryListComponent"
                                                    },
                                                    {
                                                        "path": "create",
                                                        "component": "CategoryCreationComponent"
                                                    },
                                                    {
                                                        "path": ":categoryId/edit",
                                                        "component": "CategoryEditionComponent"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": "products",
                                                "component": "CatalogProductsComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "ProductListComponent"
                                                    },
                                                    {
                                                        "path": "create",
                                                        "component": "ProductCreationComponent"
                                                    },
                                                    {
                                                        "path": ":productId/edit",
                                                        "component": "ProductEditionComponent"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": "highlighted-products",
                                                "component": "ProductHighlightComponent"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "account-list",
                        "component": "AccountListComponent",
                        "canActivate": [
                            "AdminGuard"
                        ]
                    },
                    {
                        "path": "account",
                        "component": "AccountIsolationComponent",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "path": "",
                                "component": "ProfileComponent"
                            },
                            {
                                "path": "edit",
                                "component": "AccountEditionComponent"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "component": "NotFoundComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/auth/auth.module.ts",
                "module": "AuthModule",
                "children": [
                    {
                        "path": "callback",
                        "component": "CallbackComponent"
                    },
                    {
                        "path": "login",
                        "component": "AuthSigninComponent",
                        "canActivate": [
                            "NotAuthGuard"
                        ]
                    },
                    {
                        "path": "password-reset",
                        "component": "AuthPasswordResetComponent",
                        "canActivate": [
                            "NotAuthGuard"
                        ]
                    },
                    {
                        "path": "signup",
                        "component": "AuthSignupComponent",
                        "canActivate": [
                            "NotAuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "setup-jest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/account.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_ACCOUNT_QUERY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/account.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_ACCOUNTS_QUERY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/account.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_ACCOUNT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/address.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_ADDRESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/address.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddressService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/analytics.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ANALYTICS_QUERY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/analytics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AnalyticsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/business.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BUSINESS_FULL_QUERY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/business.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BUSINESS_ID_QUERY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/business.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_BUSINESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/business.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EDIT_BUSINESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/business.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INSERT_BUSINESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/business.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REMOVE_METADATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/business.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BusinessService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_ALL_CATEGORIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_ALL_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_CATALOG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_CATEGORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_PRODUCT_BY_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_PRODUCTS_HIGHLIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INSERT_CATEGORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INSERT_FULL_CATEGORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INSERT_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INSERT_PRODUCTS_HIGHLIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REMOVE_CATEGORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REMOVE_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SORT_CATEGORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_CATEGORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/catalog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CatalogService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/api/medatata.queries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_LANGUAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/metadata.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetadataService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/upload-file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UploadFileService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routingConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/backend-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BACKEND_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/backend-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BackendUrlProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/account-form/account-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/brand-image/brand-image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrandImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BusinessFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContactItems",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOptionsItems",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISocialItems",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "contactItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultLang",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fonts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "optionsItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/business-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "socialItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/business-form/filter-languages.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterLanguagesPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/category-form/category-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product-form/product-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/set-address/set-address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SetAddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/upload-excel/upload-excel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UploadExcelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCOUNT_ID_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "provideApollo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/fixedplugin/fixedplugin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FixedPluginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/sidebar/sidebar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRouteInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/sidebar/sidebar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/toast.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToastOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/account-edition/account-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/views/account-isolation/account-isolation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountIsolationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/account-list/account-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business-creation/business-creation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BusinessCreationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business-detail/business-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BusinessDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business-detail/business-detail.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAnalyticsChartData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business-detail/business-detail.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapAnalytics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business-edition/business-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BusinessEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business-isolation/business-isolation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BusinessIsolationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business-list/business-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BusinessListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business-qr/business-qr.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BusinessQrComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/views/business/business.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BusinessComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/catalog-categories/catalog-categories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CatalogCategoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/catalog-products/catalog-products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CatalogProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/catalog-summary/catalog-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CatalogSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/views/catalog/catalog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CatalogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/views/category-creation/category-creation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryCreationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/views/category-edition/category-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/views/category-list/category-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/views/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/views/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/views/product-creation/product-creation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductCreationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/views/product-edition/product-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/views/product-highlight/filter-used-products.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterUsedProductsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/product-highlight/product-highlight.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductHighlightComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/views/product-highlight/product-highlight.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_HIGHLIGHTED_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/views/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/auth/admin.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AdminGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth-config.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.http.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthHttpInterceptorService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.mobile.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthMobile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "generateAutoConfigFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.password-reset.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthPasswordResetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tokenSubject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userSubject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPIRES_AT_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.signin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthSigninComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthSignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/auth/auth.signup.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pswStrength",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/auth/callback.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CallbackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/auth/not-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "NotAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/auth/validators.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "samePassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "domain",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "domain",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "domain",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "test-config.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configureTests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}